{"mappings":"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","sources":["<anon>","src/index.ts","src/presets.ts","src/solver/index.ts","src/solver/backtrackAdvanced.ts","src/solver/backtrackNaive.ts","src/solver/rules/index.ts","src/solver/rules/area.ts","src/solver/rules/connected.ts","src/solver/symbols/index.ts","src/solver/symbols/area.ts","src/solver/symbols/dart.ts","src/solver/symbols/viewpoint.ts","src/solver/symbols/galaxy.ts","src/solver/symbols/lotus.ts"],"sourcesContent":["var $26b86bb92301225f$export$2e2bcd8739ae039 = [\n    `{\"board\":[[2,2,2,2,2,2,2,2,2],[2,1,0,0,0,0,1,0,2],[2,0,1,0,0,0,0,1,2],[2,0,0,1,0,0,0,0,2],[2,0,0,0,1,0,0,0,2],[2,0,0,0,0,1,0,0,2],[2,1,0,0,0,0,1,0,2],[2,0,1,0,0,0,0,1,2],[2,2,2,2,2,2,2,2,2]],\"rules\":[{\"kind\":\"connected\",\"color\":2},{\"kind\":\"connected\",\"color\":1}],\"symbols\":[{\"pos\":{\"x\":1,\"y\":1},\"kind\":\"viewpoint\",\"count\":3},{\"pos\":{\"x\":2,\"y\":2},\"kind\":\"viewpoint\",\"count\":6},{\"pos\":{\"x\":3,\"y\":3},\"kind\":\"viewpoint\",\"count\":4},{\"pos\":{\"x\":4,\"y\":4},\"kind\":\"viewpoint\",\"count\":4},{\"pos\":{\"x\":5,\"y\":5},\"kind\":\"viewpoint\",\"count\":4},{\"pos\":{\"x\":6,\"y\":6},\"kind\":\"viewpoint\",\"count\":3},{\"pos\":{\"x\":7,\"y\":7},\"kind\":\"viewpoint\",\"count\":6},{\"pos\":{\"x\":6,\"y\":1},\"kind\":\"viewpoint\",\"count\":4},{\"pos\":{\"x\":7,\"y\":2},\"kind\":\"viewpoint\",\"count\":7},{\"pos\":{\"x\":1,\"y\":6},\"kind\":\"viewpoint\",\"count\":3},{\"pos\":{\"x\":2,\"y\":7},\"kind\":\"viewpoint\",\"count\":6}],\"sizeX\":9,\"sizeY\":9}`,\n    `{\"board\":[[0,0,0,1,0,1,0,0,2],[2,0,0,0,0,0,0,0,1],[1,0,1,0,0,1,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[1,0,0,2,0,0,0,0,0],[1,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0]],\"rules\":[{\"kind\":\"connected\",\"color\":2}],\"symbols\":[{\"pos\":{\"x\":1,\"y\":1},\"kind\":\"area\",\"count\":5},{\"pos\":{\"x\":2,\"y\":1},\"kind\":\"dart\",\"direction\":\"down\",\"count\":5},{\"pos\":{\"x\":1,\"y\":2},\"kind\":\"viewpoint\",\"count\":5},{\"pos\":{\"x\":3,\"y\":3},\"kind\":\"area\",\"count\":5},{\"pos\":{\"x\":4,\"y\":3},\"kind\":\"dart\",\"direction\":\"right\",\"count\":5},{\"pos\":{\"x\":3,\"y\":4},\"kind\":\"viewpoint\",\"count\":5},{\"pos\":{\"x\":6,\"y\":6},\"kind\":\"area\",\"count\":5},{\"pos\":{\"x\":7,\"y\":6},\"kind\":\"dart\",\"direction\":\"up\",\"count\":5},{\"pos\":{\"x\":6,\"y\":7},\"kind\":\"viewpoint\",\"count\":5}],\"sizeX\":8,\"sizeY\":9}`,\n    `{\"board\":[[0,0,1,0,0,0,0,0,0,1,1,0,0],[2,0,0,0,2,0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,1,0,0,0,1],[0,0,2,0,0,0,0,1,0,0,0,0,1],[0,1,0,0,0,2,0,1,0,0,1,1,0],[2,0,0,0,1,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,0,0,1,2,0,0,1],[0,1,0,0,0,1,0,1,0,0,2,0,0],[0,0,0,1,0,0,0,0,2,0,0,0,2],[0,0,1,0,0,0,0,1,0,0,0,1,0],[1,0,0,0,1,0,0,0,0,1,0,0,2],[0,1,0,0,0,1,0,2,0,0,1,2,0]],\"rules\":[{\"kind\":\"connected\",\"color\":1}],\"symbols\":[{\"kind\":\"viewpoint\",\"pos\":{\"x\":0,\"y\":2},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":0},\"count\":1},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":4},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":4},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":2},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":1},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":0},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":0},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":1},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":0},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":1},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":2},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":9,\"y\":3},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":4},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":5},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":4},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":5},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":4},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":5},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":8},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":8},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":7},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":7},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":8},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":9},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":10},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":11},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":12},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":12},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":0,\"y\":9},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":0,\"y\":10},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":8},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":7},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":7},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":9},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":10},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":11},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":12},\"count\":3}],\"sizeX\":13,\"sizeY\":13}`,\n    `{\"board\":[[2,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,0],[0,1,0,0,1,0,1,0],[0,0,0,0,0,0,0,0],[0,0,1,0,1,0,0,1],[0,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,0],[0,2,0,0,0,0,0,0],[1,0,0,0,0,0,0,0]],\"rules\":[{\"kind\":\"area\",\"color\":2,\"count\":4}],\"symbols\":[{\"kind\":\"lotus\",\"pos\":{\"x\":1,\"y\":3},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":0,\"y\":5},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":2,\"y\":6},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":4,\"y\":7},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":5,\"y\":5},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":6,\"y\":3},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":4,\"y\":2},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":2,\"y\":1},\"rotation\":3}],\"sizeX\":9,\"sizeY\":8}`,\n    `{\"board\":[[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,1,0,0,0,0,0,0],[1,2,0,2,1,2,0,0],[0,0,0,1,2,1,0,0],[0,0,0,0,0,0,0,0]],\"rules\":[{\"kind\":\"connected\",\"color\":2}],\"symbols\":[{\"kind\":\"area\",\"pos\":{\"x\":2,\"y\":0},\"count\":3},{\"kind\":\"area\",\"pos\":{\"x\":5,\"y\":0},\"count\":3},{\"kind\":\"area\",\"pos\":{\"x\":4,\"y\":1},\"count\":8},{\"kind\":\"area\",\"pos\":{\"x\":6,\"y\":3},\"count\":8},{\"kind\":\"area\",\"pos\":{\"x\":5,\"y\":4},\"count\":3},{\"kind\":\"area\",\"pos\":{\"x\":6,\"y\":5},\"count\":5},{\"kind\":\"area\",\"pos\":{\"x\":0,\"y\":7},\"count\":8}],\"sizeX\":8,\"sizeY\":8}`,\n    `{\"board\":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,2,0,0,0,0,2,0],[0,0,0,2,0,0,0,0],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,2,0,0,0],[0,0,0,0,0,0,0,0]],\"rules\":[{\"kind\":\"area\",\"color\":2,\"count\":7}],\"symbols\":[{\"kind\":\"galaxy\",\"pos\":{\"x\":2,\"y\":1}},{\"kind\":\"galaxy\",\"pos\":{\"x\":3,\"y\":3}},{\"kind\":\"galaxy\",\"pos\":{\"x\":2,\"y\":6}},{\"kind\":\"galaxy\",\"pos\":{\"x\":6,\"y\":4}}],\"sizeX\":8,\"sizeY\":8}`,\n    `{\"board\":[[3,3,1,1,1,1,1,1,1,1],[3,3,3,3,3,3,3,3,3,3],[1,3,0,0,0,1,0,1,0,0],[1,3,0,0,1,1,1,0,0,0],[1,3,2,0,0,1,0,0,1,0],[1,3,1,0,0,0,0,0,0,0],[1,3,0,0,0,0,0,0,2,1],[1,3,0,1,0,0,1,1,0,0],[1,3,0,0,0,0,1,1,0,0],[1,3,0,0,1,2,0,0,0,0]],\"rules\":[],\"symbols\":[{\"kind\":\"dart\",\"pos\":{\"x\":2,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":3,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":4,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":5,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":6,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":7,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":8,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":9,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":2},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":3},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":4},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":5},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":6},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":7},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":8},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":9},\"count\":4,\"direction\":\"down\"},{\"kind\":\"lotus\",\"pos\":{\"x\":3,\"y\":4},\"rotation\":2},{\"kind\":\"lotus\",\"pos\":{\"x\":3,\"y\":5},\"rotation\":3},{\"kind\":\"lotus\",\"pos\":{\"x\":2,\"y\":7},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":6,\"y\":9},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":7,\"y\":3},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":4,\"y\":8},\"rotation\":1},{\"kind\":\"lotus\",\"pos\":{\"x\":8,\"y\":6},\"rotation\":1},{\"kind\":\"lotus\",\"pos\":{\"x\":8,\"y\":7},\"rotation\":3},{\"kind\":\"lotus\",\"pos\":{\"x\":9,\"y\":4},\"rotation\":3},{\"kind\":\"lotus\",\"pos\":{\"x\":5,\"y\":2},\"rotation\":3}],\"sizeX\":10,\"sizeY\":10}`,\n    `{\"board\":[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,2],[2,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2],[2,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2],[2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,2],[2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,2],[2,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,2],[2,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2],[2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,2],[2,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,2],[2,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,2],[2,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,2],[2,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,2],[2,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2],[2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,2],[2,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,2],[2,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,2],[2,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2],[2,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,2],[2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,2],[2,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]],\"rules\":[{\"kind\":\"connected\",\"color\":2},{\"kind\":\"connected\",\"color\":2}],\"symbols\":[{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":1},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":2},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":4},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":6},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":7},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":10},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":15},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":17},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":20},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":21},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":4},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":5},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":8},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":11},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":12},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":14},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":16},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":18},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":19},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":21},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":6,\"y\":21},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":22},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":6,\"y\":1},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":1},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":4},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":9,\"y\":3},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":8},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":9,\"y\":7},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":10},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":6,\"y\":12},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":14},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":16},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":19},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":22},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":20},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":18},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":19},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":17},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":13},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":11},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":10},\"count\":10},{\"kind\":\"viewpoint\",\"pos\":{\"x\":13,\"y\":12},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":6},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":4},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":3},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":13,\"y\":5},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":13,\"y\":1},\"count\":10},{\"kind\":\"viewpoint\",\"pos\":{\"x\":15,\"y\":4},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":15,\"y\":7},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":16,\"y\":9},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":16,\"y\":1},\"count\":10},{\"kind\":\"viewpoint\",\"pos\":{\"x\":17,\"y\":2},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":2},\"count\":10},{\"kind\":\"viewpoint\",\"pos\":{\"x\":21,\"y\":2},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":3},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":4},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":18,\"y\":5},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":7},\"count\":11},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":6},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":8},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":20,\"y\":9},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":11},\"count\":12},{\"kind\":\"viewpoint\",\"pos\":{\"x\":17,\"y\":11},\"count\":11},{\"kind\":\"viewpoint\",\"pos\":{\"x\":20,\"y\":12},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":18,\"y\":13},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":13},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":15},\"count\":11},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":16},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":21,\"y\":17},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":21,\"y\":19},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":21,\"y\":21},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":20,\"y\":22},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":19},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":18,\"y\":18},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":16,\"y\":19},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":17,\"y\":22},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":15,\"y\":22},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":14,\"y\":20},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":14,\"y\":16},\"count\":11},{\"kind\":\"viewpoint\",\"pos\":{\"x\":16,\"y\":15},\"count\":6}],\"sizeX\":24,\"sizeY\":24}`\n];\n\n\nvar $23a1d4457e298dfa$export$f6f0c3fe4ec306ea;\n(function(Cell) {\n    Cell[Cell[\"Empty\"] = 0] = \"Empty\";\n    Cell[Cell[\"Light\"] = 1] = \"Light\";\n    Cell[Cell[\"Dark\"] = 2] = \"Dark\";\n    Cell[Cell[\"Border\"] = 3] = \"Border\";\n})($23a1d4457e298dfa$export$f6f0c3fe4ec306ea || ($23a1d4457e298dfa$export$f6f0c3fe4ec306ea = {}));\nvar $23a1d4457e298dfa$export$cacd6541cfeeb6c1;\n(function(Direction) {\n    Direction[\"Up\"] = \"up\";\n    Direction[\"Down\"] = \"down\";\n    Direction[\"Left\"] = \"left\";\n    Direction[\"Right\"] = \"right\";\n})($23a1d4457e298dfa$export$cacd6541cfeeb6c1 || ($23a1d4457e298dfa$export$cacd6541cfeeb6c1 = {}));\nfunction $23a1d4457e298dfa$export$4a4364286744cc63(board, pos) {\n    return pos.x >= 0 && pos.x < board.length && pos.y >= 0 && pos.y < board[0].length;\n}\nfunction $23a1d4457e298dfa$export$c6757b58ad4e7ffb(color) {\n    return color == 2 ? 1 : 2;\n}\nfunction $23a1d4457e298dfa$export$2fdcdcc209570cf1(board, pos) {\n    const positions = [];\n    if (pos.x > 0) {\n        if (board[pos.x - 1][pos.y] != 3) positions.push({\n            x: pos.x - 1,\n            y: pos.y\n        });\n    }\n    if (pos.x + 1 < board.length) {\n        if (board[pos.x + 1][pos.y] != 3) positions.push({\n            x: pos.x + 1,\n            y: pos.y\n        });\n    }\n    if (pos.y > 0) {\n        if (board[pos.x][pos.y - 1] != 3) positions.push({\n            x: pos.x,\n            y: pos.y - 1\n        });\n    }\n    if (pos.y + 1 < board[0].length) {\n        if (board[pos.x][pos.y + 1] != 3) positions.push({\n            x: pos.x,\n            y: pos.y + 1\n        });\n    }\n    return positions;\n}\nfunction $23a1d4457e298dfa$export$8f67fe9da9d07bbe(dir) {\n    switch(dir){\n        case \"up\":\n            return [\n                -1,\n                0\n            ];\n        case \"down\":\n            return [\n                1,\n                0\n            ];\n        case \"left\":\n            return [\n                0,\n                -1\n            ];\n        case \"right\":\n            return [\n                0,\n                1\n            ];\n    }\n}\n\n\n\n\n\nfunction $40d494cec576e41e$export$adfbfb79bd6241(board, rule) {\n    const checked = [];\n    // Initialize the visited array\n    for(let x = 0; x < board.length; x++){\n        checked[x] = [];\n        for(let y = 0; y < board[0].length; y++)checked[x][y] = false;\n    }\n    // Loop through all cells\n    for(let x = 0; x < board.length; x++)for(let y = 0; y < board[0].length; y++){\n        if (checked[x][y]) continue;\n        if (board[x][y] == rule.color) {\n            // Verify area\n            if (!$40d494cec576e41e$var$verifyAreaComplex(board, {\n                x: x,\n                y: y\n            }, rule.color, rule.count, checked)) return false;\n        }\n    }\n    return true;\n}\nfunction $40d494cec576e41e$var$verifyAreaComplex(board, pos, color, count, checked) {\n    const sameCellQueue = [\n        pos\n    ];\n    const usableCellQueue = [];\n    let sameCellCount = 0;\n    let usableCellCount = 0;\n    const visited = [];\n    // Initialize the visited array\n    for(let x = 0; x < board.length; x++){\n        visited[x] = [];\n        for(let y = 0; y < board[0].length; y++)visited[x][y] = false;\n    }\n    visited[pos.x][pos.y] = true;\n    checked[pos.x][pos.y] = true;\n    // Count same cell\n    while(sameCellQueue.length > 0){\n        const curPos = sameCellQueue.pop();\n        sameCellCount += 1;\n        for (const neighbour of (0, $23a1d4457e298dfa$export$2fdcdcc209570cf1)(board, curPos)){\n            if (visited[neighbour.x][neighbour.y]) continue;\n            const neighbourCell = board[neighbour.x][neighbour.y];\n            if (neighbourCell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) usableCellQueue.push(neighbour);\n            else if (neighbourCell == color) {\n                sameCellQueue.push(neighbour);\n                checked[neighbour.x][neighbour.y] = true;\n            }\n            visited[neighbour.x][neighbour.y] = true;\n        }\n    }\n    if (sameCellCount > count) return false;\n    // Count usable cell\n    while(usableCellQueue.length > 0){\n        const curPos = usableCellQueue.pop();\n        usableCellCount += 1;\n        if (sameCellCount + usableCellCount >= count) return true;\n        for (const neighbour of (0, $23a1d4457e298dfa$export$2fdcdcc209570cf1)(board, curPos)){\n            if (visited[neighbour.x][neighbour.y]) continue;\n            const neighbourCell = board[neighbour.x][neighbour.y];\n            if (neighbourCell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty || neighbourCell == color) {\n                usableCellQueue.push(neighbour);\n                visited[neighbour.x][neighbour.y] = true;\n            }\n        }\n    }\n    return sameCellCount + usableCellCount >= count;\n}\n\n\n\nfunction $51ae21d6bd218658$export$1a0bd7e1795f2686(board, rule) {\n    // Find all same cells\n    const sameCells = [];\n    for(let x = 0; x < board.length; x++){\n        for(let y = 0; y < board[0].length; y++)if (board[x][y] == rule.color) sameCells.push({\n            x: x,\n            y: y\n        });\n    }\n    // If there are no same cells, return true\n    if (sameCells.length === 0) return true;\n    const queue = [\n        sameCells[0]\n    ];\n    const visited = [];\n    // Initialize the visited array\n    for(let x = 0; x < board.length; x++){\n        visited[x] = [];\n        for(let y = 0; y < board[0].length; y++)visited[x][y] = false;\n    }\n    // Perform flood fill\n    visited[sameCells[0].x][sameCells[0].y] = true;\n    while(queue.length > 0){\n        const curPos = queue.pop();\n        for (const neighbour of (0, $23a1d4457e298dfa$export$2fdcdcc209570cf1)(board, curPos)){\n            if (visited[neighbour.x][neighbour.y] || board[neighbour.x][neighbour.y] == (0, $23a1d4457e298dfa$export$c6757b58ad4e7ffb)(rule.color)) continue;\n            visited[neighbour.x][neighbour.y] = true;\n            queue.push(neighbour);\n        }\n    }\n    // Check if any same cell is not reachable\n    for (const cell of sameCells){\n        if (!visited[cell.x][cell.y]) return false;\n    }\n    return true;\n}\n\n\n\n\n\nfunction $a63e24b34f338180$export$31354bc3afda28ec(board, symbol) {\n    const pos = symbol.pos;\n    const cell = board[pos.x][pos.y];\n    if (cell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) return [\n        symbol.pos\n    ];\n    const visited = [];\n    const sameCellQueue = [\n        pos\n    ];\n    const usableCellQueue = [];\n    let sameCellCount = 0;\n    let usableCellCount = 0;\n    // Initialize the visited array\n    for(let x = 0; x < board.length; x++){\n        visited[x] = [];\n        for(let y = 0; y < board[0].length; y++)visited[x][y] = false;\n    }\n    visited[pos.x][pos.y] = true;\n    // Count same cell\n    while(sameCellQueue.length > 0){\n        const curPos = sameCellQueue.pop();\n        sameCellCount += 1;\n        for (const neighbour of (0, $23a1d4457e298dfa$export$2fdcdcc209570cf1)(board, curPos)){\n            if (visited[neighbour.x][neighbour.y]) continue;\n            const neighbourCell = board[neighbour.x][neighbour.y];\n            if (neighbourCell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) usableCellQueue.push(neighbour);\n            else if (neighbourCell == cell) sameCellQueue.push(neighbour);\n            visited[neighbour.x][neighbour.y] = true;\n        }\n    }\n    if (sameCellCount > symbol.count) return false;\n    const emptyNeighbours = [\n        ...usableCellQueue\n    ];\n    // Count usable cell\n    while(usableCellQueue.length > 0){\n        const curPos = usableCellQueue.pop();\n        usableCellCount += 1;\n        if (sameCellCount + usableCellCount >= symbol.count) return emptyNeighbours;\n        for (const neighbour of (0, $23a1d4457e298dfa$export$2fdcdcc209570cf1)(board, curPos)){\n            if (visited[neighbour.x][neighbour.y]) continue;\n            const neighbourCell = board[neighbour.x][neighbour.y];\n            if (neighbourCell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty || neighbourCell == cell) {\n                usableCellQueue.push(neighbour);\n                visited[neighbour.x][neighbour.y] = true;\n            }\n        }\n    }\n    return sameCellCount + usableCellCount >= symbol.count ? emptyNeighbours : false;\n}\n\n\n\nfunction $c02e051691fcd169$export$1134e8a1d414bde5(board, symbol) {\n    const pos = symbol.pos;\n    const cell = board[pos.x][pos.y];\n    if (cell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) return true;\n    let [dirX, dirY] = (0, $23a1d4457e298dfa$export$8f67fe9da9d07bbe)(symbol.direction);\n    let x = pos.x + dirX;\n    let y = pos.y + dirY;\n    let oppositeCells = 0;\n    let emptyCells = 0;\n    while((0, $23a1d4457e298dfa$export$4a4364286744cc63)(board, {\n        x: x,\n        y: y\n    })){\n        // Opposite Cell\n        if ((0, $23a1d4457e298dfa$export$c6757b58ad4e7ffb)(cell) == board[x][y]) {\n            oppositeCells += 1;\n            if (oppositeCells > symbol.count) return false;\n        }\n        // Empty cells\n        if (board[x][y] == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) emptyCells += 1;\n        x += dirX;\n        y += dirY;\n    }\n    return oppositeCells + emptyCells >= symbol.count;\n}\nfunction $c02e051691fcd169$export$3b153b4898bc09d3(board, symbol) {\n    const affectedCells = [];\n    let [dirX, dirY] = (0, $23a1d4457e298dfa$export$8f67fe9da9d07bbe)(symbol.direction);\n    let x = symbol.pos.x;\n    let y = symbol.pos.y;\n    while((0, $23a1d4457e298dfa$export$4a4364286744cc63)(board, {\n        x: x,\n        y: y\n    })){\n        if (board[x][y] == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) affectedCells.push({\n            x: x,\n            y: y\n        });\n        x += dirX;\n        y += dirY;\n    }\n    return affectedCells;\n}\n\n\n\nfunction $4d1253280084f323$export$a357ea5ecccee97a(board, symbol) {\n    const pos = symbol.pos;\n    const cell = board[pos.x][pos.y];\n    if (cell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) return [\n        symbol.pos\n    ];\n    let usableCells = 1;\n    let sameCells = 1;\n    let affected_cells = [];\n    function traverse(dirX, dirY) {\n        let connected = true;\n        let x = pos.x + dirX;\n        let y = pos.y + dirY;\n        while((0, $23a1d4457e298dfa$export$4a4364286744cc63)(board, {\n            x: x,\n            y: y\n        })){\n            const curCell = board[x][y];\n            if (connected) {\n                if (cell == curCell) {\n                    sameCells += 1;\n                    if (sameCells > symbol.count) return true;\n                } else {\n                    if (curCell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) affected_cells.push({\n                        x: x,\n                        y: y\n                    });\n                    connected = false;\n                }\n            }\n            if ((0, $23a1d4457e298dfa$export$c6757b58ad4e7ffb)(cell) == curCell || curCell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Border) break;\n            usableCells += 1;\n            x += dirX;\n            y += dirY;\n        }\n        return false;\n    }\n    if (traverse(-1, 0) || traverse(1, 0) || traverse(0, -1) || traverse(0, 1)) return false;\n    if (usableCells < symbol.count) return false;\n    return affected_cells;\n}\n\n\n\n// Translate a position in relative to a galaxy symbol\nfunction $6d65da1caa50a14e$var$movePosGalaxy(board, symbol, pos) {\n    const newPos = {\n        x: 2 * symbol.pos.x - pos.x,\n        y: 2 * symbol.pos.y - pos.y\n    };\n    return (0, $23a1d4457e298dfa$export$4a4364286744cc63)(board, newPos) ? newPos : null;\n}\nfunction $6d65da1caa50a14e$export$8232563112a7992c(board, symbol) {\n    const pos = symbol.pos;\n    const cell = board[pos.x][pos.y];\n    if (cell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) return [\n        pos\n    ];\n    const queue = [\n        pos\n    ];\n    const visited = [];\n    const affectedCells = [];\n    // Initialize the visited array\n    for(let x = 0; x < board.length; x++){\n        visited[x] = [];\n        for(let y = 0; y < board[0].length; y++)visited[x][y] = false;\n    }\n    // Visit all connected cells\n    while(queue.length > 0){\n        const curPos = queue.pop();\n        if (visited[curPos.x][curPos.y]) continue;\n        visited[curPos.x][curPos.y] = true;\n        const oppoPos = $6d65da1caa50a14e$var$movePosGalaxy(board, symbol, curPos);\n        if (oppoPos == null) return false;\n        if (!(board[oppoPos.x][oppoPos.y] == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty || board[oppoPos.x][oppoPos.y] == cell)) return false;\n        for (const neighbour of (0, $23a1d4457e298dfa$export$2fdcdcc209570cf1)(board, curPos)){\n            if (visited[neighbour.x][neighbour.y]) continue;\n            if (board[neighbour.x][neighbour.y] == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) affectedCells.push(neighbour);\n            else if (board[neighbour.x][neighbour.y] == cell) queue.push(neighbour);\n        }\n    }\n    return affectedCells;\n}\n\n\n\n// Translate a position in relative to a lotus symbol\nfunction $69cf25c83de67185$var$movePosLotus(board, symbol, pos) {\n    let newPos;\n    if (symbol.rotation == 0) newPos = {\n        x: pos.x,\n        y: 2 * symbol.pos.y - pos.y\n    };\n    else if (symbol.rotation == 1) newPos = {\n        x: symbol.pos.x + symbol.pos.y - pos.y,\n        y: symbol.pos.x + symbol.pos.y - pos.x\n    };\n    else if (symbol.rotation == 2) newPos = {\n        x: 2 * symbol.pos.x - pos.x,\n        y: pos.y\n    };\n    else if (symbol.rotation == 3) newPos = {\n        x: symbol.pos.x - symbol.pos.y + pos.y,\n        y: symbol.pos.y - symbol.pos.x + pos.x\n    };\n    return (0, $23a1d4457e298dfa$export$4a4364286744cc63)(board, newPos) ? newPos : null;\n}\nfunction $69cf25c83de67185$export$611011f9f41996b0(board, symbol) {\n    const pos = symbol.pos;\n    const cell = board[pos.x][pos.y];\n    if (cell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) return [\n        pos\n    ];\n    const queue = [\n        pos\n    ];\n    const visited = [];\n    const affectedCells = [];\n    // Initialize the visited array\n    for(let x = 0; x < board.length; x++){\n        visited[x] = [];\n        for(let y = 0; y < board[0].length; y++)visited[x][y] = false;\n    }\n    // Visit all connected cells\n    while(queue.length > 0){\n        const curPos = queue.pop();\n        if (visited[curPos.x][curPos.y]) continue;\n        visited[curPos.x][curPos.y] = true;\n        const oppoPos = $69cf25c83de67185$var$movePosLotus(board, symbol, curPos);\n        if (oppoPos == null) return false;\n        if (!(board[oppoPos.x][oppoPos.y] == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty || board[oppoPos.x][oppoPos.y] == cell)) return false;\n        for (const neighbour of (0, $23a1d4457e298dfa$export$2fdcdcc209570cf1)(board, curPos)){\n            if (visited[neighbour.x][neighbour.y]) continue;\n            if (board[neighbour.x][neighbour.y] == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) affectedCells.push(neighbour);\n            else if (board[neighbour.x][neighbour.y] == cell) queue.push(neighbour);\n        }\n    }\n    return affectedCells;\n}\n\n\n\n\nfunction $53615a2a23168eb3$export$1ea939691cdc45b8(game) {\n    for (const rule of game.rules){\n        if (rule.kind == \"connected\" && !(0, $51ae21d6bd218658$export$1a0bd7e1795f2686)(game.board, rule)) return false;\n        if (rule.kind == \"area\" && !(0, $40d494cec576e41e$export$adfbfb79bd6241)(game.board, rule)) return false;\n    }\n    for (const symbol of game.symbols){\n        if (symbol.kind == \"area\" && !(0, $a63e24b34f338180$export$31354bc3afda28ec)(game.board, symbol)) return false;\n        if (symbol.kind == \"dart\" && !(0, $c02e051691fcd169$export$1134e8a1d414bde5)(game.board, symbol)) return false;\n        if (symbol.kind == \"viewpoint\" && !(0, $4d1253280084f323$export$a357ea5ecccee97a)(game.board, symbol)) return false;\n        if (symbol.kind == \"galaxy\" && !(0, $6d65da1caa50a14e$export$8232563112a7992c)(game.board, symbol)) return false;\n        if (symbol.kind == \"lotus\" && !(0, $69cf25c83de67185$export$611011f9f41996b0)(game.board, symbol)) return false;\n    }\n    return true;\n}\nfunction $53615a2a23168eb3$export$51cf117a8d59891d(game) {\n    for(let x = 0; x < game.sizeX; x++)for(let y = 0; y < game.sizeY; y++){\n        if (game.board[x][y] === (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) return {\n            x: x,\n            y: y\n        };\n    }\n    return null;\n}\nfunction $53615a2a23168eb3$export$2865df1f26e73f8e(game) {\n    if (!$53615a2a23168eb3$export$1ea939691cdc45b8(game)) return false;\n    // Find the first empty cell\n    let pos = $53615a2a23168eb3$export$51cf117a8d59891d(game);\n    if (!pos) return true;\n    // TODO: Use a better method to determine the order\n    game.board[pos.x][pos.y] = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Light;\n    if ($53615a2a23168eb3$export$2865df1f26e73f8e(game)) return true;\n    game.board[pos.x][pos.y] = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark;\n    if ($53615a2a23168eb3$export$2865df1f26e73f8e(game)) return true;\n    // If both fail, returns to initial state\n    game.board[pos.x][pos.y] = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty;\n    return false;\n}\n\n\n\n\n\n// This function chooses the next empty cell to search.\n// The logic is that cells that are more \"near\" to symbols should be searched first (more constrained).\n// This help reduces the search space.\nfunction $c771330a62c04a0a$var$advancedNextCell(game, adjLookup) {\n    // Find the cell with the most constraints in the lookup\n    let highest = 0;\n    let cell = null;\n    for(let x = 0; x < game.sizeX; x++)for(let y = 0; y < game.sizeY; y++){\n        if (!adjLookup[x][y]) continue;\n        if (adjLookup[x][y].length > highest) {\n            highest = adjLookup[x][y].length;\n            cell = {\n                x: x,\n                y: y\n            };\n        }\n    }\n    if (cell) return cell;\n    // Fallback to naive next cell\n    return (0, $53615a2a23168eb3$export$51cf117a8d59891d)(game);\n}\nfunction $c771330a62c04a0a$var$buildAdjacencyLookup(game, adjList) {\n    let adjLookup = [];\n    // Initialize the map\n    for(let x = 0; x < game.sizeX; x++){\n        adjLookup[x] = [];\n        for(let y = 0; y < game.sizeY; y++)adjLookup[x][y] = null;\n    }\n    for (const adj of adjList)for (const cell of adj.affectedCells){\n        if (game.board[cell.x][cell.y] != (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty) continue;\n        if (!adjLookup[cell.x][cell.y]) adjLookup[cell.x][cell.y] = [];\n        adjLookup[cell.x][cell.y].push(adj);\n    }\n    return adjLookup;\n}\nfunction $c771330a62c04a0a$export$8067003fcb413cb(game, adjLookup, placed, placedColor, originalAdj) {\n    // We save all the adjacency changes made into original adjacency, so that we can reverse the changes if it backtracks\n    // Loop through all symbols that are \"near\" to this cell\n    // For most symbols, only cells that are \"near\" can make the symbol invalid, so only those cells should be checked\n    if (adjLookup[placed.x][placed.y]) {\n        for (const adj of adjLookup[placed.x][placed.y])if (adj.symbol.kind == \"dart\") {\n            // Dart\n            // For dart, we don't need to rebuild adjacency\n            if (!(0, $c02e051691fcd169$export$1134e8a1d414bde5)(game.board, adj.symbol)) return false;\n        } else {\n            // For other symbols, we do need to rebuild adjacency\n            let affected_cells;\n            if (adj.symbol.kind == \"area\") // Area\n            affected_cells = (0, $a63e24b34f338180$export$31354bc3afda28ec)(game.board, adj.symbol);\n            else if (adj.symbol.kind == \"viewpoint\") // Viewpoint\n            affected_cells = (0, $4d1253280084f323$export$a357ea5ecccee97a)(game.board, adj.symbol);\n            else if (adj.symbol.kind == \"galaxy\") // Galaxy\n            affected_cells = (0, $6d65da1caa50a14e$export$8232563112a7992c)(game.board, adj.symbol);\n            else if (adj.symbol.kind == \"lotus\") // Lotus\n            affected_cells = (0, $69cf25c83de67185$export$611011f9f41996b0)(game.board, adj.symbol);\n            if (!affected_cells) return false;\n            // Save affected cells\n            originalAdj.push([\n                adj,\n                adj.affectedCells\n            ]);\n            // Update adjacency\n            adj.affectedCells = affected_cells;\n        }\n    }\n    // Area symbol special case\n    for (const symbol of game.symbols)// Opposite color case\n    // A cell can potentially invalidate an area symbol even if the cell is not \"near\" to the symbol\n    if (symbol.kind == \"area\") {\n        const symbolCell = game.board[symbol.pos.x][symbol.pos.y];\n        if (symbolCell == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty || symbolCell == placedColor || adjLookup[placed.x][placed.y]?.find((ri)=>ri.symbol == symbol)) continue;\n        if (!(0, $a63e24b34f338180$export$31354bc3afda28ec)(game.board, symbol)) return false;\n    }\n    for (const rule of game.rules){\n        // Connected\n        if (rule.kind == \"connected\" && !(0, $51ae21d6bd218658$export$1a0bd7e1795f2686)(game.board, rule)) return false;\n        // Area\n        if (rule.kind == \"area\" && !(0, $40d494cec576e41e$export$adfbfb79bd6241)(game.board, rule)) return false;\n    }\n    return true;\n}\n// Reverse all adjacency changes made.\nfunction $c771330a62c04a0a$var$reverseAdjChange(originalAdj) {\n    for (const [adj, affected_cells] of originalAdj)adj.affectedCells = affected_cells;\n}\nfunction $c771330a62c04a0a$export$aa7c0171f33b3f0a(game) {\n    if (!(0, $53615a2a23168eb3$export$1ea939691cdc45b8)(game)) return false;\n    const adjacencies = [];\n    // Generate adjacencies\n    for (const symbol of game.symbols){\n        let result;\n        if (symbol.kind == \"area\") result = (0, $a63e24b34f338180$export$31354bc3afda28ec)(game.board, symbol);\n        else if (symbol.kind == \"dart\") result = (0, $c02e051691fcd169$export$3b153b4898bc09d3)(game.board, symbol);\n        else if (symbol.kind == \"viewpoint\") result = (0, $4d1253280084f323$export$a357ea5ecccee97a)(game.board, symbol);\n        else if (symbol.kind == \"galaxy\") result = (0, $6d65da1caa50a14e$export$8232563112a7992c)(game.board, symbol);\n        else if (symbol.kind == \"lotus\") result = (0, $69cf25c83de67185$export$611011f9f41996b0)(game.board, symbol);\n        if (!result) return false;\n        adjacencies.push({\n            symbol: symbol,\n            affectedCells: result\n        });\n    }\n    return $c771330a62c04a0a$export$5a6d40a70b01b335(game, adjacencies);\n}\nfunction $c771330a62c04a0a$export$5a6d40a70b01b335(game, adjacencies) {\n    // Build an adjacency lookup grid\n    // TODO: Do not build this lookup grid on every backtrack\n    let adjLookup = $c771330a62c04a0a$var$buildAdjacencyLookup(game, adjacencies);\n    // Find the first empty cell\n    let pos = $c771330a62c04a0a$var$advancedNextCell(game, adjLookup);\n    if (!pos) return true;\n    // TODO: Use a better method to determine the order\n    {\n        const originalAdj = [];\n        // Guess\n        game.board[pos.x][pos.y] = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Light;\n        if ($c771330a62c04a0a$export$8067003fcb413cb(game, adjLookup, pos, (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Light, originalAdj) && $c771330a62c04a0a$export$5a6d40a70b01b335(game, adjacencies)) return true;\n        // Reverse adjacency changes\n        $c771330a62c04a0a$var$reverseAdjChange(originalAdj);\n    }\n    {\n        const originalAdj = [];\n        // Guess\n        game.board[pos.x][pos.y] = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark;\n        if ($c771330a62c04a0a$export$8067003fcb413cb(game, adjLookup, pos, (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark, originalAdj) && $c771330a62c04a0a$export$5a6d40a70b01b335(game, adjacencies)) return true;\n        // Reverse adjacency changes\n        $c771330a62c04a0a$var$reverseAdjChange(originalAdj);\n    }\n    // If both fail, returns to initial state\n    game.board[pos.x][pos.y] = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty;\n    return false;\n}\n\n\nconst $b4e14b6b8da86996$var$canvas = document.getElementById(\"board\");\nconst $b4e14b6b8da86996$var$rect = $b4e14b6b8da86996$var$canvas.getBoundingClientRect();\nconst $b4e14b6b8da86996$var$ctx = $b4e14b6b8da86996$var$canvas.getContext(\"2d\");\nlet $b4e14b6b8da86996$var$game = $b4e14b6b8da86996$var$createEmptyGame(10, 10);\nlet $b4e14b6b8da86996$var$pixelCellSize = 50;\n// Add event listeners to handle cell interaction\nlet $b4e14b6b8da86996$var$isMouseDown = false;\nlet $b4e14b6b8da86996$var$mouseCell = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty;\n$b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n$b4e14b6b8da86996$var$updateRuleList();\n// Function to get the cell color\nfunction $b4e14b6b8da86996$var$getCellColor(cell) {\n    switch(cell){\n        case (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty:\n            return \"#A0A0A0\";\n        case (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Light:\n            return \"#FFFFFF\";\n        case (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark:\n            return \"#202020\";\n        case (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Border:\n            return \"#404040\";\n    }\n}\n// Function to draw the board\nfunction $b4e14b6b8da86996$var$drawGame(game) {\n    if ($b4e14b6b8da86996$var$canvas.width != game.sizeY * $b4e14b6b8da86996$var$pixelCellSize) $b4e14b6b8da86996$var$canvas.width = game.sizeY * $b4e14b6b8da86996$var$pixelCellSize;\n    if ($b4e14b6b8da86996$var$canvas.height != game.sizeX * $b4e14b6b8da86996$var$pixelCellSize) $b4e14b6b8da86996$var$canvas.height = game.sizeX * $b4e14b6b8da86996$var$pixelCellSize;\n    // Clear the canvas\n    $b4e14b6b8da86996$var$ctx.clearRect(0, 0, $b4e14b6b8da86996$var$canvas.width, $b4e14b6b8da86996$var$canvas.height);\n    // Loop through each cell in the board\n    for(let x = 0; x < game.sizeX; x++)for(let y = 0; y < game.sizeY; y++){\n        const pixelX = y * $b4e14b6b8da86996$var$pixelCellSize;\n        const pixelY = x * $b4e14b6b8da86996$var$pixelCellSize;\n        const cell = game.board[x][y];\n        const color = $b4e14b6b8da86996$var$getCellColor(cell);\n        // Draw the cell\n        $b4e14b6b8da86996$var$ctx.fillStyle = color;\n        $b4e14b6b8da86996$var$ctx.fillRect(pixelX, pixelY, $b4e14b6b8da86996$var$pixelCellSize, $b4e14b6b8da86996$var$pixelCellSize);\n        // Draw the border\n        $b4e14b6b8da86996$var$ctx.strokeStyle = \"#404040\";\n        $b4e14b6b8da86996$var$ctx.strokeRect(pixelX, pixelY, $b4e14b6b8da86996$var$pixelCellSize, $b4e14b6b8da86996$var$pixelCellSize);\n    }\n    // Draw the symbols\n    for (const symbol of game.symbols){\n        const pixelX = symbol.pos.y * $b4e14b6b8da86996$var$pixelCellSize;\n        const pixelY = symbol.pos.x * $b4e14b6b8da86996$var$pixelCellSize;\n        $b4e14b6b8da86996$var$ctx.fillStyle = game.board[symbol.pos.x][symbol.pos.y] == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark ? \"white\" : \"black\";\n        $b4e14b6b8da86996$var$ctx.textAlign = \"center\";\n        $b4e14b6b8da86996$var$ctx.textBaseline = \"middle\";\n        // Draw the number on top of the cell\n        if (symbol.kind == \"area\" || symbol.kind == \"viewpoint\" || symbol.kind == \"dart\") {\n            $b4e14b6b8da86996$var$ctx.font = \"bold \" + Math.floor($b4e14b6b8da86996$var$pixelCellSize / 2) + \"px Arial\";\n            $b4e14b6b8da86996$var$ctx.fillText(symbol.count.toString(), pixelX + $b4e14b6b8da86996$var$pixelCellSize / 2, pixelY + $b4e14b6b8da86996$var$pixelCellSize / 2);\n        }\n        if (symbol.kind == \"lotus\") {\n            $b4e14b6b8da86996$var$ctx.font = \"bold \" + Math.floor($b4e14b6b8da86996$var$pixelCellSize / 2) + \"px Arial\";\n            let text;\n            if (symbol.rotation == 0) text = \"\\u2195\";\n            else if (symbol.rotation == 1) text = \"\\u2922\";\n            else if (symbol.rotation == 2) text = \"\\u2194\";\n            else if (symbol.rotation == 3) text = \"\\u2921\";\n            $b4e14b6b8da86996$var$ctx.fillText(text, pixelX + $b4e14b6b8da86996$var$pixelCellSize / 2, pixelY + $b4e14b6b8da86996$var$pixelCellSize / 2);\n        }\n        if (symbol.kind != \"area\") {\n            $b4e14b6b8da86996$var$ctx.font = Math.floor($b4e14b6b8da86996$var$pixelCellSize / 4) + \"px Arial\";\n            let text = symbol.kind;\n            if (symbol.kind == \"dart\") {\n                if (symbol.direction == \"up\") text += \" \\u2191\";\n                else if (symbol.direction == \"down\") text += \" \\u2193\";\n                else if (symbol.direction == \"left\") text += \" \\u2190\";\n                else if (symbol.direction == \"right\") text += \" \\u2192\";\n            }\n            $b4e14b6b8da86996$var$ctx.fillText(text, pixelX + $b4e14b6b8da86996$var$pixelCellSize / 2, pixelY + $b4e14b6b8da86996$var$pixelCellSize / 1.25);\n        }\n    }\n}\n// Function to handle cell color change on mouse move\nfunction $b4e14b6b8da86996$var$handleMouseMove(event) {\n    if ($b4e14b6b8da86996$var$getMode() != \"cell\" && $b4e14b6b8da86996$var$getMode() != \"border\") return;\n    if (!$b4e14b6b8da86996$var$isMouseDown) return;\n    const pos = $b4e14b6b8da86996$var$getMouseCellPos(event);\n    if (!pos) return;\n    $b4e14b6b8da86996$var$game.board[pos.x][pos.y] = $b4e14b6b8da86996$var$mouseCell;\n    $b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n}\n// Function to handle cell color change on mouse down\nfunction $b4e14b6b8da86996$var$handleMouseDown(event) {\n    if ($b4e14b6b8da86996$var$getMode() != \"cell\" && $b4e14b6b8da86996$var$getMode() != \"border\") return;\n    $b4e14b6b8da86996$var$isMouseDown = true;\n    if ($b4e14b6b8da86996$var$getMode() == \"border\") {\n        if (event.button == 0) $b4e14b6b8da86996$var$mouseCell = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Border;\n        else if (event.button == 2) $b4e14b6b8da86996$var$mouseCell = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty;\n    } else {\n        if (event.button == 0) $b4e14b6b8da86996$var$mouseCell = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark; // Left click\n        else if (event.button == 2) $b4e14b6b8da86996$var$mouseCell = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Light; // Right click\n        else if (event.button == 1) $b4e14b6b8da86996$var$mouseCell = (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty; // Middle click\n    }\n    const pos = $b4e14b6b8da86996$var$getMouseCellPos(event);\n    if (!pos) return;\n    $b4e14b6b8da86996$var$game.board[pos.x][pos.y] = $b4e14b6b8da86996$var$mouseCell;\n    $b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n}\n// Function to handle cell color change on mouse up\nfunction $b4e14b6b8da86996$var$handleMouseUp() {\n    if ($b4e14b6b8da86996$var$getMode() != \"cell\" && $b4e14b6b8da86996$var$getMode() != \"border\") return;\n    $b4e14b6b8da86996$var$isMouseDown = false;\n}\nfunction $b4e14b6b8da86996$var$getMouseCellPos(event) {\n    const pixelX = event.pageX - $b4e14b6b8da86996$var$rect.left;\n    const pixelY = event.pageY - $b4e14b6b8da86996$var$rect.top;\n    const x = Math.floor(pixelY / $b4e14b6b8da86996$var$pixelCellSize);\n    const y = Math.floor(pixelX / $b4e14b6b8da86996$var$pixelCellSize);\n    if (x < 0 || x >= $b4e14b6b8da86996$var$game.sizeX || y < 0 || y >= $b4e14b6b8da86996$var$game.sizeY) return null;\n    return {\n        x: x,\n        y: y\n    };\n}\n// Function to reset the game\nfunction $b4e14b6b8da86996$var$resetGame() {\n    const sizeX = parseInt(document.getElementById(\"size-x\").value);\n    const sizeY = parseInt(document.getElementById(\"size-y\").value);\n    if (isNaN(sizeX) || isNaN(sizeY) || sizeX < 1 || sizeY < 1) {\n        alert(\"Invalid size!\");\n        return;\n    }\n    $b4e14b6b8da86996$var$game = $b4e14b6b8da86996$var$createEmptyGame(sizeX, sizeY);\n    $b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n    $b4e14b6b8da86996$var$updateRuleList();\n}\n// Function to create an empty game\nfunction $b4e14b6b8da86996$var$createEmptyGame(sizeX, sizeY) {\n    const board = [];\n    for(let x = 0; x < sizeX; x++){\n        board.push([]);\n        for(let y = 0; y < sizeY; y++)board[x].push((0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Empty);\n    }\n    return {\n        board: board,\n        rules: [],\n        symbols: [],\n        sizeX: sizeX,\n        sizeY: sizeY\n    };\n}\n// Function to solve the game\nfunction $b4e14b6b8da86996$var$solveBoard() {\n    console.log(\"Solving the game...\");\n    console.time();\n    const success = (0, $c771330a62c04a0a$export$aa7c0171f33b3f0a)($b4e14b6b8da86996$var$game);\n    console.timeEnd();\n    if (!success) alert(\"No valid solutions found!\");\n    $b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n}\n// Function to get the item mode\nfunction $b4e14b6b8da86996$var$getMode() {\n    return document.getElementById(\"item-select\").value;\n}\nfunction $b4e14b6b8da86996$var$getInput(event, out) {\n    const inputBox = document.createElement(\"input\");\n    inputBox.id = \"input-box\";\n    inputBox.style.left = `${event.pageX}px`;\n    inputBox.style.top = `${event.pageY}px`;\n    document.body.appendChild(inputBox);\n    window.requestAnimationFrame(()=>inputBox.focus());\n    inputBox.addEventListener(\"keydown\", (e)=>{\n        if (e.key != \"Enter\") return;\n        const value = inputBox.value;\n        inputBox.blur();\n        out(value);\n    });\n    inputBox.addEventListener(\"blur\", ()=>{\n        inputBox.remove();\n    });\n}\nfunction $b4e14b6b8da86996$var$handlePlaceSymbol(event) {\n    const mode = $b4e14b6b8da86996$var$getMode();\n    if (mode == \"cell\" || mode == \"border\") return;\n    const pos = $b4e14b6b8da86996$var$getMouseCellPos(event);\n    if (!pos) return;\n    if (event.button == 2) // Remove symbol\n    // If a symbol already exists at pos, remove it\n    $b4e14b6b8da86996$var$game.symbols = $b4e14b6b8da86996$var$game.symbols.filter((s)=>s.pos.x != pos.x || s.pos.y != pos.y);\n    else if (event.button == 0) {\n        // Place symbol\n        // Symbols with input\n        if (mode == \"area\" || mode == \"viewpoint\" || mode == \"dart 0\" || mode == \"dart 1\" || mode == \"dart 2\" || mode == \"dart 3\") {\n            $b4e14b6b8da86996$var$getInput(event, (value)=>{\n                const num = parseInt(value);\n                if (isNaN(num) || num < 1) return;\n                let symbol;\n                if (mode == \"area\") symbol = {\n                    kind: \"area\",\n                    pos: pos,\n                    count: num\n                };\n                else if (mode == \"viewpoint\") symbol = {\n                    kind: \"viewpoint\",\n                    pos: pos,\n                    count: num\n                };\n                else if (mode == \"dart 0\") symbol = {\n                    kind: \"dart\",\n                    pos: pos,\n                    count: num,\n                    direction: (0, $23a1d4457e298dfa$export$cacd6541cfeeb6c1).Up\n                };\n                else if (mode == \"dart 1\") symbol = {\n                    kind: \"dart\",\n                    pos: pos,\n                    count: num,\n                    direction: (0, $23a1d4457e298dfa$export$cacd6541cfeeb6c1).Down\n                };\n                else if (mode == \"dart 2\") symbol = {\n                    kind: \"dart\",\n                    pos: pos,\n                    count: num,\n                    direction: (0, $23a1d4457e298dfa$export$cacd6541cfeeb6c1).Left\n                };\n                else if (mode == \"dart 3\") symbol = {\n                    kind: \"dart\",\n                    pos: pos,\n                    count: num,\n                    direction: (0, $23a1d4457e298dfa$export$cacd6541cfeeb6c1).Right\n                };\n                // If a symbol already exists at pos, remove it\n                $b4e14b6b8da86996$var$game.symbols = $b4e14b6b8da86996$var$game.symbols.filter((s)=>s.pos.x != pos.x || s.pos.y != pos.y);\n                // Add the symbol\n                $b4e14b6b8da86996$var$game.symbols.push(symbol);\n                $b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n            });\n            return;\n        }\n        // Symbols without input\n        let symbol;\n        if (mode == \"galaxy\") symbol = {\n            kind: \"galaxy\",\n            pos: pos\n        };\n        else if (mode == \"lotus 0\") symbol = {\n            kind: \"lotus\",\n            pos: pos,\n            rotation: 0\n        };\n        else if (mode == \"lotus 1\") symbol = {\n            kind: \"lotus\",\n            pos: pos,\n            rotation: 1\n        };\n        else if (mode == \"lotus 2\") symbol = {\n            kind: \"lotus\",\n            pos: pos,\n            rotation: 2\n        };\n        else if (mode == \"lotus 3\") symbol = {\n            kind: \"lotus\",\n            pos: pos,\n            rotation: 3\n        };\n        // If a symbol already exists at pos, remove it\n        $b4e14b6b8da86996$var$game.symbols = $b4e14b6b8da86996$var$game.symbols.filter((s)=>s.pos.x != pos.x || s.pos.y != pos.y);\n        // Add the symbol\n        $b4e14b6b8da86996$var$game.symbols.push(symbol);\n    }\n    $b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n}\nfunction $b4e14b6b8da86996$var$handleAddRule(event) {\n    const rule = document.getElementById(\"rule-select\").value;\n    if (rule == \"connected dark\") {\n        $b4e14b6b8da86996$var$game.rules.push({\n            kind: \"connected\",\n            color: (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark\n        });\n        $b4e14b6b8da86996$var$updateRuleList();\n    } else if (rule == \"connected light\") {\n        $b4e14b6b8da86996$var$game.rules.push({\n            kind: \"connected\",\n            color: (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Light\n        });\n        $b4e14b6b8da86996$var$updateRuleList();\n    } else if (rule == \"area dark\" || rule == \"area light\") $b4e14b6b8da86996$var$getInput(event, (value)=>{\n        const num = parseInt(value);\n        if (isNaN(num) || num < 1) return;\n        if (rule == \"area dark\") $b4e14b6b8da86996$var$game.rules.push({\n            kind: \"area\",\n            color: (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark,\n            count: num\n        });\n        else if (rule == \"area light\") $b4e14b6b8da86996$var$game.rules.push({\n            kind: \"area\",\n            color: (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Light,\n            count: num\n        });\n        $b4e14b6b8da86996$var$updateRuleList();\n    });\n}\nfunction $b4e14b6b8da86996$var$handleClearRules() {\n    $b4e14b6b8da86996$var$game.rules = [];\n    $b4e14b6b8da86996$var$updateRuleList();\n}\nfunction $b4e14b6b8da86996$var$updateRuleList() {\n    const list = document.getElementById(\"rule-list\");\n    list.innerHTML = \"\";\n    for (const rule of $b4e14b6b8da86996$var$game.rules){\n        const element = document.createElement(\"li\");\n        if (rule.kind == \"connected\") element.textContent = `Connect all ${rule.color == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark ? \"dark\" : \"light\"} cells`;\n        else if (rule.kind == \"area\") element.textContent = `All ${rule.color == (0, $23a1d4457e298dfa$export$f6f0c3fe4ec306ea).Dark ? \"dark\" : \"light\"} regions have area ${rule.count}`;\n        list.appendChild(element);\n    }\n}\nfunction $b4e14b6b8da86996$var$handleImport(event) {\n    $b4e14b6b8da86996$var$getInput(event, (value)=>{\n        if (value == \"\") return;\n        try {\n            $b4e14b6b8da86996$var$game = JSON.parse(value);\n            $b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n            $b4e14b6b8da86996$var$updateRuleList();\n        } catch (err) {\n            console.error(err);\n            alert(\"Import failed! See console for more details.\");\n        }\n    });\n}\nfunction $b4e14b6b8da86996$var$handlePreset(event) {\n    const preset = event.target.value;\n    if (preset == \"none\") $b4e14b6b8da86996$var$resetGame();\n    else $b4e14b6b8da86996$var$game = JSON.parse((0, $26b86bb92301225f$export$2e2bcd8739ae039)[parseInt(preset) - 1]);\n    $b4e14b6b8da86996$var$drawGame($b4e14b6b8da86996$var$game);\n    $b4e14b6b8da86996$var$updateRuleList();\n}\nfunction $b4e14b6b8da86996$var$handleExport() {\n    console.log(JSON.stringify($b4e14b6b8da86996$var$game));\n    alert(\"Game has been printed to the console.\\nPress Ctrl+Shift+I to view it.\");\n}\n$b4e14b6b8da86996$var$canvas.addEventListener(\"mousedown\", $b4e14b6b8da86996$var$handleMouseDown);\nwindow.addEventListener(\"mouseup\", $b4e14b6b8da86996$var$handleMouseUp);\n$b4e14b6b8da86996$var$canvas.addEventListener(\"mousemove\", $b4e14b6b8da86996$var$handleMouseMove);\n$b4e14b6b8da86996$var$canvas.addEventListener(\"contextmenu\", (event)=>event.preventDefault());\ndocument.getElementById(\"reset-button\").addEventListener(\"click\", $b4e14b6b8da86996$var$resetGame);\ndocument.getElementById(\"add-rule-button\").addEventListener(\"click\", $b4e14b6b8da86996$var$handleAddRule);\ndocument.getElementById(\"clear-rules-button\").addEventListener(\"click\", $b4e14b6b8da86996$var$handleClearRules);\ndocument.getElementById(\"preset-select\").addEventListener(\"change\", $b4e14b6b8da86996$var$handlePreset);\ndocument.getElementById(\"import-button\").addEventListener(\"click\", $b4e14b6b8da86996$var$handleImport);\ndocument.getElementById(\"export-button\").addEventListener(\"click\", $b4e14b6b8da86996$var$handleExport);\ndocument.getElementById(\"solve-button\").addEventListener(\"click\", $b4e14b6b8da86996$var$solveBoard);\n$b4e14b6b8da86996$var$canvas.addEventListener(\"mousedown\", $b4e14b6b8da86996$var$handlePlaceSymbol);\n\n\n//# sourceMappingURL=index.89240e7d.js.map\n","import presets from './presets';\r\nimport { Board, Symbol, Pos, Cell, Direction, Game } from './solver';\r\nimport { solveAdvanced } from './solver/backtrackAdvanced';\r\n\r\nconst canvas = document.getElementById('board')! as HTMLCanvasElement;\r\nconst rect = canvas.getBoundingClientRect();\r\nconst ctx = canvas.getContext('2d')!;\r\n\r\nlet game: Game = createEmptyGame(10, 10);\r\n\r\nlet pixelCellSize = 50;\r\n\r\n// Add event listeners to handle cell interaction\r\nlet isMouseDown = false;\r\nlet mouseCell: Cell = Cell.Empty;\r\n\r\ndrawGame(game);\r\nupdateRuleList();\r\n\r\n// Function to get the cell color\r\nfunction getCellColor(cell: Cell): string {\r\n  switch (cell) {\r\n    case Cell.Empty:\r\n      return '#A0A0A0';\r\n    case Cell.Light:\r\n      return '#FFFFFF';\r\n    case Cell.Dark:\r\n      return '#202020';\r\n    case Cell.Border:\r\n      return '#404040';\r\n  }\r\n}\r\n\r\n// Function to draw the board\r\nfunction drawGame(game: Game) {\r\n  if (canvas.width != game.sizeY * pixelCellSize) canvas.width = game.sizeY * pixelCellSize;\r\n  if (canvas.height != game.sizeX * pixelCellSize) canvas.height = game.sizeX * pixelCellSize;\r\n\r\n  // Clear the canvas\r\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n  // Loop through each cell in the board\r\n  for (let x = 0; x < game.sizeX; x++) {\r\n    for (let y = 0; y < game.sizeY; y++) {\r\n      const pixelX = y * pixelCellSize;\r\n      const pixelY = x * pixelCellSize;\r\n\r\n      const cell = game.board[x][y];\r\n      const color = getCellColor(cell);\r\n\r\n      // Draw the cell\r\n      ctx.fillStyle = color;\r\n      ctx.fillRect(pixelX, pixelY, pixelCellSize, pixelCellSize);\r\n\r\n      // Draw the border\r\n      ctx.strokeStyle = '#404040';\r\n      ctx.strokeRect(pixelX, pixelY, pixelCellSize, pixelCellSize);\r\n    }\r\n  }\r\n\r\n  // Draw the symbols\r\n  for (const symbol of game.symbols) {\r\n    const pixelX = symbol.pos.y * pixelCellSize;\r\n    const pixelY = symbol.pos.x * pixelCellSize;\r\n\r\n    ctx.fillStyle = game.board[symbol.pos.x][symbol.pos.y] == Cell.Dark ? 'white' : 'black';\r\n    ctx.textAlign = 'center';\r\n    ctx.textBaseline = 'middle';\r\n\r\n    // Draw the number on top of the cell\r\n    if (symbol.kind == 'area' || symbol.kind == 'viewpoint' || symbol.kind == 'dart') {\r\n      ctx.font = 'bold ' + Math.floor(pixelCellSize / 2) + 'px Arial';\r\n      ctx.fillText(symbol.count.toString(), pixelX + pixelCellSize / 2, pixelY + pixelCellSize / 2);\r\n    }\r\n\r\n    if (symbol.kind == 'lotus') {\r\n      ctx.font = 'bold ' + Math.floor(pixelCellSize / 2) + 'px Arial';\r\n      let text: string;\r\n      if (symbol.rotation == 0) {\r\n        text = '↕';\r\n      } else if (symbol.rotation == 1) {\r\n        text = '⤢';\r\n      } else if (symbol.rotation == 2) {\r\n        text = '↔';\r\n      } else if (symbol.rotation == 3) {\r\n        text = '⤡';\r\n      }\r\n      ctx.fillText(text!, pixelX + pixelCellSize / 2, pixelY + pixelCellSize / 2);\r\n    }\r\n\r\n    if (symbol.kind != 'area') {\r\n      ctx.font = Math.floor(pixelCellSize / 4) + 'px Arial';\r\n\r\n      let text = symbol.kind;\r\n      if (symbol.kind == 'dart') {\r\n        if (symbol.direction == 'up') {\r\n          text += ' ↑';\r\n        } else if (symbol.direction == 'down') {\r\n          text += ' ↓';\r\n        } else if (symbol.direction == 'left') {\r\n          text += ' ←';\r\n        } else if (symbol.direction == 'right') {\r\n          text += ' →';\r\n        }\r\n      }\r\n\r\n      ctx.fillText(text, pixelX + pixelCellSize / 2, pixelY + pixelCellSize / 1.25);\r\n    }\r\n  }\r\n}\r\n\r\n// Function to handle cell color change on mouse move\r\nfunction handleMouseMove(event: MouseEvent) {\r\n  if (getMode() != 'cell' && getMode() != 'border') return;\r\n  if (!isMouseDown) return;\r\n\r\n  const pos = getMouseCellPos(event);\r\n  if (!pos) return;\r\n\r\n  game.board[pos.x][pos.y] = mouseCell;\r\n  drawGame(game);\r\n}\r\n\r\n// Function to handle cell color change on mouse down\r\nfunction handleMouseDown(event: MouseEvent) {\r\n  if (getMode() != 'cell' && getMode() != 'border') return;\r\n\r\n  isMouseDown = true;\r\n\r\n  if (getMode() == 'border') {\r\n    if (event.button == 0) {\r\n      mouseCell = Cell.Border;\r\n    } else if (event.button == 2) {\r\n      mouseCell = Cell.Empty;\r\n    }\r\n  } else {\r\n    if (event.button == 0) {\r\n      mouseCell = Cell.Dark; // Left click\r\n    } else if (event.button == 2) {\r\n      mouseCell = Cell.Light; // Right click\r\n    } else if (event.button == 1) {\r\n      mouseCell = Cell.Empty; // Middle click\r\n    }\r\n  }\r\n\r\n  const pos = getMouseCellPos(event);\r\n  if (!pos) return;\r\n\r\n  game.board[pos.x][pos.y] = mouseCell;\r\n  drawGame(game);\r\n}\r\n\r\n// Function to handle cell color change on mouse up\r\nfunction handleMouseUp() {\r\n  if (getMode() != 'cell' && getMode() != 'border') return;\r\n  isMouseDown = false;\r\n}\r\n\r\nfunction getMouseCellPos(event: MouseEvent): Pos | null {\r\n  const pixelX = event.pageX - rect.left;\r\n  const pixelY = event.pageY - rect.top;\r\n\r\n  const x = Math.floor(pixelY / pixelCellSize);\r\n  const y = Math.floor(pixelX / pixelCellSize);\r\n\r\n  if (x < 0 || x >= game.sizeX || y < 0 || y >= game.sizeY) return null;\r\n\r\n  return { x, y };\r\n}\r\n\r\n// Function to reset the game\r\nfunction resetGame() {\r\n  const sizeX = parseInt((document.getElementById('size-x')! as HTMLInputElement).value);\r\n  const sizeY = parseInt((document.getElementById('size-y')! as HTMLInputElement).value);\r\n\r\n  if (isNaN(sizeX) || isNaN(sizeY) || sizeX < 1 || sizeY < 1) {\r\n    alert('Invalid size!');\r\n    return;\r\n  }\r\n\r\n  game = createEmptyGame(sizeX, sizeY);\r\n\r\n  drawGame(game);\r\n  updateRuleList();\r\n}\r\n\r\n// Function to create an empty game\r\nfunction createEmptyGame(sizeX: number, sizeY: number): Game {\r\n  const board: Board = [];\r\n\r\n  for (let x = 0; x < sizeX; x++) {\r\n    board.push([]);\r\n    for (let y = 0; y < sizeY; y++) {\r\n      board[x].push(Cell.Empty);\r\n    }\r\n  }\r\n\r\n  return {\r\n    board,\r\n    rules: [],\r\n    symbols: [],\r\n    sizeX,\r\n    sizeY\r\n  };\r\n}\r\n\r\n// Function to solve the game\r\nfunction solveBoard() {\r\n  console.log('Solving the game...');\r\n\r\n  console.time();\r\n  const success = solveAdvanced(game);\r\n  console.timeEnd();\r\n\r\n  if (!success) alert('No valid solutions found!');\r\n\r\n  drawGame(game);\r\n}\r\n\r\n// Function to get the item mode\r\nfunction getMode(): string {\r\n  return (document.getElementById('item-select')! as HTMLSelectElement).value;\r\n}\r\n\r\nfunction getInput(event: MouseEvent, out: (value: string) => void) {\r\n  const inputBox = document.createElement('input');\r\n  inputBox.id = 'input-box';\r\n  inputBox.style.left = `${event.pageX}px`;\r\n  inputBox.style.top = `${event.pageY}px`;\r\n  document.body.appendChild(inputBox);\r\n\r\n  window.requestAnimationFrame(() => inputBox.focus());\r\n\r\n  inputBox.addEventListener('keydown', e => {\r\n    if (e.key != 'Enter') return;\r\n\r\n    const value = inputBox.value;\r\n    inputBox.blur();\r\n\r\n    out(value);\r\n  });\r\n\r\n  inputBox.addEventListener('blur', () => {\r\n    inputBox.remove();\r\n  });\r\n}\r\n\r\nfunction handlePlaceSymbol(event: MouseEvent) {\r\n  const mode = getMode();\r\n  if (mode == 'cell' || mode == 'border') return;\r\n\r\n  const pos = getMouseCellPos(event);\r\n  if (!pos) return;\r\n\r\n  if (event.button == 2) {\r\n    // Remove symbol\r\n\r\n    // If a symbol already exists at pos, remove it\r\n    game.symbols = game.symbols.filter(s => s.pos.x != pos.x || s.pos.y != pos.y);\r\n  } else if (event.button == 0) {\r\n    // Place symbol\r\n\r\n    // Symbols with input\r\n\r\n    if (\r\n      mode == 'area' ||\r\n      mode == 'viewpoint' ||\r\n      mode == 'dart 0' ||\r\n      mode == 'dart 1' ||\r\n      mode == 'dart 2' ||\r\n      mode == 'dart 3'\r\n    ) {\r\n      getInput(event, value => {\r\n        const num = parseInt(value);\r\n        if (isNaN(num) || num < 1) return;\r\n\r\n        let symbol: Symbol;\r\n        if (mode == 'area') {\r\n          symbol = { kind: 'area', pos, count: num };\r\n        } else if (mode == 'viewpoint') {\r\n          symbol = { kind: 'viewpoint', pos, count: num };\r\n        } else if (mode == 'dart 0') {\r\n          symbol = { kind: 'dart', pos, count: num, direction: Direction.Up };\r\n        } else if (mode == 'dart 1') {\r\n          symbol = { kind: 'dart', pos, count: num, direction: Direction.Down };\r\n        } else if (mode == 'dart 2') {\r\n          symbol = { kind: 'dart', pos, count: num, direction: Direction.Left };\r\n        } else if (mode == 'dart 3') {\r\n          symbol = { kind: 'dart', pos, count: num, direction: Direction.Right };\r\n        }\r\n\r\n        // If a symbol already exists at pos, remove it\r\n        game.symbols = game.symbols.filter(s => s.pos.x != pos.x || s.pos.y != pos.y);\r\n\r\n        // Add the symbol\r\n        game.symbols.push(symbol!);\r\n\r\n        drawGame(game);\r\n      });\r\n\r\n      return;\r\n    }\r\n\r\n    // Symbols without input\r\n\r\n    let symbol: Symbol;\r\n    if (mode == 'galaxy') {\r\n      symbol = { kind: 'galaxy', pos };\r\n    } else if (mode == 'lotus 0') {\r\n      symbol = { kind: 'lotus', pos, rotation: 0 };\r\n    } else if (mode == 'lotus 1') {\r\n      symbol = { kind: 'lotus', pos, rotation: 1 };\r\n    } else if (mode == 'lotus 2') {\r\n      symbol = { kind: 'lotus', pos, rotation: 2 };\r\n    } else if (mode == 'lotus 3') {\r\n      symbol = { kind: 'lotus', pos, rotation: 3 };\r\n    }\r\n\r\n    // If a symbol already exists at pos, remove it\r\n    game.symbols = game.symbols.filter(s => s.pos.x != pos.x || s.pos.y != pos.y);\r\n\r\n    // Add the symbol\r\n    game.symbols.push(symbol!);\r\n  }\r\n\r\n  drawGame(game);\r\n}\r\n\r\nfunction handleAddRule(event: MouseEvent) {\r\n  const rule = (document.getElementById('rule-select')! as HTMLSelectElement).value;\r\n  if (rule == 'connected dark') {\r\n    game.rules.push({ kind: 'connected', color: Cell.Dark });\r\n    updateRuleList();\r\n  } else if (rule == 'connected light') {\r\n    game.rules.push({ kind: 'connected', color: Cell.Light });\r\n    updateRuleList();\r\n  } else if (rule == 'area dark' || rule == 'area light') {\r\n    getInput(event, value => {\r\n      const num = parseInt(value);\r\n      if (isNaN(num) || num < 1) return;\r\n\r\n      if (rule == 'area dark') {\r\n        game.rules.push({ kind: 'area', color: Cell.Dark, count: num });\r\n      } else if (rule == 'area light') {\r\n        game.rules.push({ kind: 'area', color: Cell.Light, count: num });\r\n      }\r\n\r\n      updateRuleList();\r\n    });\r\n  }\r\n}\r\n\r\nfunction handleClearRules() {\r\n  game.rules = [];\r\n  updateRuleList();\r\n}\r\n\r\nfunction updateRuleList() {\r\n  const list = document.getElementById('rule-list')!;\r\n  list.innerHTML = '';\r\n\r\n  for (const rule of game.rules) {\r\n    const element = document.createElement('li');\r\n\r\n    if (rule.kind == 'connected') {\r\n      element.textContent = `Connect all ${rule.color == Cell.Dark ? 'dark' : 'light'} cells`;\r\n    } else if (rule.kind == 'area') {\r\n      element.textContent = `All ${rule.color == Cell.Dark ? 'dark' : 'light'} regions have area ${rule.count}`;\r\n    }\r\n\r\n    list.appendChild(element);\r\n  }\r\n}\r\n\r\nfunction handleImport(event: MouseEvent) {\r\n  getInput(event, value => {\r\n    if (value == '') return;\r\n\r\n    try {\r\n      game = JSON.parse(value);\r\n\r\n      drawGame(game);\r\n      updateRuleList();\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert('Import failed! See console for more details.');\r\n    }\r\n  });\r\n}\r\n\r\nfunction handlePreset(event: Event) {\r\n  const preset = (event.target as HTMLSelectElement).value;\r\n\r\n  if (preset == 'none') {\r\n    resetGame();\r\n  } else {\r\n    game = JSON.parse(presets[parseInt(preset) - 1]);\r\n  }\r\n  drawGame(game);\r\n  updateRuleList();\r\n}\r\n\r\nfunction handleExport() {\r\n  console.log(JSON.stringify(game));\r\n\r\n  alert('Game has been printed to the console.\\nPress Ctrl+Shift+I to view it.');\r\n}\r\n\r\ncanvas.addEventListener('mousedown', handleMouseDown);\r\nwindow.addEventListener('mouseup', handleMouseUp);\r\ncanvas.addEventListener('mousemove', handleMouseMove);\r\ncanvas.addEventListener('contextmenu', event => event.preventDefault());\r\n\r\ndocument.getElementById('reset-button')!.addEventListener('click', resetGame);\r\ndocument.getElementById('add-rule-button')!.addEventListener('click', handleAddRule);\r\ndocument.getElementById('clear-rules-button')!.addEventListener('click', handleClearRules);\r\ndocument.getElementById('preset-select')!.addEventListener('change', handlePreset);\r\ndocument.getElementById('import-button')!.addEventListener('click', handleImport);\r\ndocument.getElementById('export-button')!.addEventListener('click', handleExport);\r\ndocument.getElementById('solve-button')!.addEventListener('click', solveBoard);\r\n\r\ncanvas.addEventListener('mousedown', handlePlaceSymbol);\r\n","export default [\r\n  `{\"board\":[[2,2,2,2,2,2,2,2,2],[2,1,0,0,0,0,1,0,2],[2,0,1,0,0,0,0,1,2],[2,0,0,1,0,0,0,0,2],[2,0,0,0,1,0,0,0,2],[2,0,0,0,0,1,0,0,2],[2,1,0,0,0,0,1,0,2],[2,0,1,0,0,0,0,1,2],[2,2,2,2,2,2,2,2,2]],\"rules\":[{\"kind\":\"connected\",\"color\":2},{\"kind\":\"connected\",\"color\":1}],\"symbols\":[{\"pos\":{\"x\":1,\"y\":1},\"kind\":\"viewpoint\",\"count\":3},{\"pos\":{\"x\":2,\"y\":2},\"kind\":\"viewpoint\",\"count\":6},{\"pos\":{\"x\":3,\"y\":3},\"kind\":\"viewpoint\",\"count\":4},{\"pos\":{\"x\":4,\"y\":4},\"kind\":\"viewpoint\",\"count\":4},{\"pos\":{\"x\":5,\"y\":5},\"kind\":\"viewpoint\",\"count\":4},{\"pos\":{\"x\":6,\"y\":6},\"kind\":\"viewpoint\",\"count\":3},{\"pos\":{\"x\":7,\"y\":7},\"kind\":\"viewpoint\",\"count\":6},{\"pos\":{\"x\":6,\"y\":1},\"kind\":\"viewpoint\",\"count\":4},{\"pos\":{\"x\":7,\"y\":2},\"kind\":\"viewpoint\",\"count\":7},{\"pos\":{\"x\":1,\"y\":6},\"kind\":\"viewpoint\",\"count\":3},{\"pos\":{\"x\":2,\"y\":7},\"kind\":\"viewpoint\",\"count\":6}],\"sizeX\":9,\"sizeY\":9}`,\r\n  `{\"board\":[[0,0,0,1,0,1,0,0,2],[2,0,0,0,0,0,0,0,1],[1,0,1,0,0,1,0,0,0],[0,0,0,0,0,0,0,1,0],[0,0,0,0,0,0,0,0,0],[1,0,0,2,0,0,0,0,0],[1,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0]],\"rules\":[{\"kind\":\"connected\",\"color\":2}],\"symbols\":[{\"pos\":{\"x\":1,\"y\":1},\"kind\":\"area\",\"count\":5},{\"pos\":{\"x\":2,\"y\":1},\"kind\":\"dart\",\"direction\":\"down\",\"count\":5},{\"pos\":{\"x\":1,\"y\":2},\"kind\":\"viewpoint\",\"count\":5},{\"pos\":{\"x\":3,\"y\":3},\"kind\":\"area\",\"count\":5},{\"pos\":{\"x\":4,\"y\":3},\"kind\":\"dart\",\"direction\":\"right\",\"count\":5},{\"pos\":{\"x\":3,\"y\":4},\"kind\":\"viewpoint\",\"count\":5},{\"pos\":{\"x\":6,\"y\":6},\"kind\":\"area\",\"count\":5},{\"pos\":{\"x\":7,\"y\":6},\"kind\":\"dart\",\"direction\":\"up\",\"count\":5},{\"pos\":{\"x\":6,\"y\":7},\"kind\":\"viewpoint\",\"count\":5}],\"sizeX\":8,\"sizeY\":9}`,\r\n  `{\"board\":[[0,0,1,0,0,0,0,0,0,1,1,0,0],[2,0,0,0,2,0,0,0,1,0,0,0,0],[0,0,0,0,1,0,0,0,1,0,0,0,1],[0,0,2,0,0,0,0,1,0,0,0,0,1],[0,1,0,0,0,2,0,1,0,0,1,1,0],[2,0,0,0,1,0,0,0,1,1,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0],[1,0,0,0,1,0,0,0,1,2,0,0,1],[0,1,0,0,0,1,0,1,0,0,2,0,0],[0,0,0,1,0,0,0,0,2,0,0,0,2],[0,0,1,0,0,0,0,1,0,0,0,1,0],[1,0,0,0,1,0,0,0,0,1,0,0,2],[0,1,0,0,0,1,0,2,0,0,1,2,0]],\"rules\":[{\"kind\":\"connected\",\"color\":1}],\"symbols\":[{\"kind\":\"viewpoint\",\"pos\":{\"x\":0,\"y\":2},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":0},\"count\":1},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":4},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":4},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":2},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":1},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":0},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":0},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":1},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":0},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":1},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":2},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":9,\"y\":3},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":4},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":5},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":4},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":5},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":4},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":5},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":8},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":8},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":7},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":7},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":8},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":9},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":10},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":11},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":12},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":12},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":0,\"y\":9},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":0,\"y\":10},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":8},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":7},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":7},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":9},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":10},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":11},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":12},\"count\":3}],\"sizeX\":13,\"sizeY\":13}`,\r\n  `{\"board\":[[2,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,0],[0,1,0,0,1,0,1,0],[0,0,0,0,0,0,0,0],[0,0,1,0,1,0,0,1],[0,0,0,0,0,1,0,0],[0,0,0,1,0,0,0,0],[0,2,0,0,0,0,0,0],[1,0,0,0,0,0,0,0]],\"rules\":[{\"kind\":\"area\",\"color\":2,\"count\":4}],\"symbols\":[{\"kind\":\"lotus\",\"pos\":{\"x\":1,\"y\":3},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":0,\"y\":5},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":2,\"y\":6},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":4,\"y\":7},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":5,\"y\":5},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":6,\"y\":3},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":4,\"y\":2},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":2,\"y\":1},\"rotation\":3}],\"sizeX\":9,\"sizeY\":8}`,\r\n  `{\"board\":[[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[2,1,0,0,0,0,0,0],[1,2,0,2,1,2,0,0],[0,0,0,1,2,1,0,0],[0,0,0,0,0,0,0,0]],\"rules\":[{\"kind\":\"connected\",\"color\":2}],\"symbols\":[{\"kind\":\"area\",\"pos\":{\"x\":2,\"y\":0},\"count\":3},{\"kind\":\"area\",\"pos\":{\"x\":5,\"y\":0},\"count\":3},{\"kind\":\"area\",\"pos\":{\"x\":4,\"y\":1},\"count\":8},{\"kind\":\"area\",\"pos\":{\"x\":6,\"y\":3},\"count\":8},{\"kind\":\"area\",\"pos\":{\"x\":5,\"y\":4},\"count\":3},{\"kind\":\"area\",\"pos\":{\"x\":6,\"y\":5},\"count\":5},{\"kind\":\"area\",\"pos\":{\"x\":0,\"y\":7},\"count\":8}],\"sizeX\":8,\"sizeY\":8}`,\r\n  `{\"board\":[[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0],[0,2,0,0,0,0,2,0],[0,0,0,2,0,0,0,0],[0,0,0,0,0,0,0,1],[0,0,0,0,0,0,0,0],[0,0,0,0,2,0,0,0],[0,0,0,0,0,0,0,0]],\"rules\":[{\"kind\":\"area\",\"color\":2,\"count\":7}],\"symbols\":[{\"kind\":\"galaxy\",\"pos\":{\"x\":2,\"y\":1}},{\"kind\":\"galaxy\",\"pos\":{\"x\":3,\"y\":3}},{\"kind\":\"galaxy\",\"pos\":{\"x\":2,\"y\":6}},{\"kind\":\"galaxy\",\"pos\":{\"x\":6,\"y\":4}}],\"sizeX\":8,\"sizeY\":8}`,\r\n  `{\"board\":[[3,3,1,1,1,1,1,1,1,1],[3,3,3,3,3,3,3,3,3,3],[1,3,0,0,0,1,0,1,0,0],[1,3,0,0,1,1,1,0,0,0],[1,3,2,0,0,1,0,0,1,0],[1,3,1,0,0,0,0,0,0,0],[1,3,0,0,0,0,0,0,2,1],[1,3,0,1,0,0,1,1,0,0],[1,3,0,0,0,0,1,1,0,0],[1,3,0,0,1,2,0,0,0,0]],\"rules\":[],\"symbols\":[{\"kind\":\"dart\",\"pos\":{\"x\":2,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":3,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":4,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":5,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":6,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":7,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":8,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":9,\"y\":0},\"count\":4,\"direction\":\"right\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":2},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":3},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":4},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":5},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":6},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":7},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":8},\"count\":4,\"direction\":\"down\"},{\"kind\":\"dart\",\"pos\":{\"x\":0,\"y\":9},\"count\":4,\"direction\":\"down\"},{\"kind\":\"lotus\",\"pos\":{\"x\":3,\"y\":4},\"rotation\":2},{\"kind\":\"lotus\",\"pos\":{\"x\":3,\"y\":5},\"rotation\":3},{\"kind\":\"lotus\",\"pos\":{\"x\":2,\"y\":7},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":6,\"y\":9},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":7,\"y\":3},\"rotation\":0},{\"kind\":\"lotus\",\"pos\":{\"x\":4,\"y\":8},\"rotation\":1},{\"kind\":\"lotus\",\"pos\":{\"x\":8,\"y\":6},\"rotation\":1},{\"kind\":\"lotus\",\"pos\":{\"x\":8,\"y\":7},\"rotation\":3},{\"kind\":\"lotus\",\"pos\":{\"x\":9,\"y\":4},\"rotation\":3},{\"kind\":\"lotus\",\"pos\":{\"x\":5,\"y\":2},\"rotation\":3}],\"sizeX\":10,\"sizeY\":10}`,\r\n  `{\"board\":[[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2],[2,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,1,0,0,1,0,0,2],[2,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,2],[2,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2],[2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,1,0,2],[2,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,2],[2,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,2],[2,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,2],[2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,2],[2,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,2],[2,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,2],[2,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,2],[2,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,2],[2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,2],[2,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2],[2,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,2],[2,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,2],[2,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,2],[2,0,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2],[2,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,2],[2,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,2],[2,0,0,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,2],[2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]],\"rules\":[{\"kind\":\"connected\",\"color\":2},{\"kind\":\"connected\",\"color\":2}],\"symbols\":[{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":1},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":2},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":4},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":6},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":7},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":10},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":15},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":17},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":1,\"y\":20},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":2,\"y\":21},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":4},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":5},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":8},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":11},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":12},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":3,\"y\":14},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":16},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":18},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":19},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":4,\"y\":21},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":6,\"y\":21},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":22},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":6,\"y\":1},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":1},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":4},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":9,\"y\":3},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":8},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":9,\"y\":7},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":5,\"y\":10},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":6,\"y\":12},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":7,\"y\":14},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":16},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":8,\"y\":19},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":22},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":20},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":18},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":19},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":17},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":13},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":10,\"y\":11},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":10},\"count\":10},{\"kind\":\"viewpoint\",\"pos\":{\"x\":13,\"y\":12},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":6},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":11,\"y\":4},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":12,\"y\":3},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":13,\"y\":5},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":13,\"y\":1},\"count\":10},{\"kind\":\"viewpoint\",\"pos\":{\"x\":15,\"y\":4},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":15,\"y\":7},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":16,\"y\":9},\"count\":6},{\"kind\":\"viewpoint\",\"pos\":{\"x\":16,\"y\":1},\"count\":10},{\"kind\":\"viewpoint\",\"pos\":{\"x\":17,\"y\":2},\"count\":2},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":2},\"count\":10},{\"kind\":\"viewpoint\",\"pos\":{\"x\":21,\"y\":2},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":3},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":4},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":18,\"y\":5},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":7},\"count\":11},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":6},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":8},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":20,\"y\":9},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":11},\"count\":12},{\"kind\":\"viewpoint\",\"pos\":{\"x\":17,\"y\":11},\"count\":11},{\"kind\":\"viewpoint\",\"pos\":{\"x\":20,\"y\":12},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":18,\"y\":13},\"count\":8},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":13},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":15},\"count\":11},{\"kind\":\"viewpoint\",\"pos\":{\"x\":22,\"y\":16},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":21,\"y\":17},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":21,\"y\":19},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":21,\"y\":21},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":20,\"y\":22},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":19,\"y\":19},\"count\":7},{\"kind\":\"viewpoint\",\"pos\":{\"x\":18,\"y\":18},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":16,\"y\":19},\"count\":9},{\"kind\":\"viewpoint\",\"pos\":{\"x\":17,\"y\":22},\"count\":4},{\"kind\":\"viewpoint\",\"pos\":{\"x\":15,\"y\":22},\"count\":3},{\"kind\":\"viewpoint\",\"pos\":{\"x\":14,\"y\":20},\"count\":5},{\"kind\":\"viewpoint\",\"pos\":{\"x\":14,\"y\":16},\"count\":11},{\"kind\":\"viewpoint\",\"pos\":{\"x\":16,\"y\":15},\"count\":6}],\"sizeX\":24,\"sizeY\":24}`\r\n];\r\n","import { ConnectedRule, AreaRule } from './rules';\r\nimport { AreaSymbol, DartSymbol, ViewpointSymbol, GalaxySymbol, LotusSymbol } from './symbols';\r\n\r\nexport interface Pos {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nexport enum Cell {\r\n  Empty = 0,\r\n  Light,\r\n  Dark,\r\n  Border\r\n}\r\n\r\nexport type Color = Cell.Light | Cell.Dark;\r\n\r\nexport type Rule = ConnectedRule | AreaRule;\r\n\r\nexport type Symbol = AreaSymbol | DartSymbol | ViewpointSymbol | GalaxySymbol | LotusSymbol;\r\n\r\nexport type Board = Cell[][];\r\n\r\nexport interface Game {\r\n  board: Board;\r\n  rules: Rule[];\r\n  symbols: Symbol[];\r\n  sizeX: number;\r\n  sizeY: number;\r\n}\r\n\r\nexport enum Direction {\r\n  Up = 'up',\r\n  Down = 'down',\r\n  Left = 'left',\r\n  Right = 'right'\r\n}\r\n\r\n// Check if the position is within the board\r\nexport function verifyPos(board: Board, pos: Pos): boolean {\r\n  return pos.x >= 0 && pos.x < board.length && pos.y >= 0 && pos.y < board[0].length;\r\n}\r\n\r\nexport function getOppositeColor(color: Color): Color {\r\n  return color == Cell.Dark ? Cell.Light : Cell.Dark;\r\n}\r\n\r\nexport function getNeighbours(board: Board, pos: Pos): Pos[] {\r\n  const positions: Pos[] = [];\r\n\r\n  if (pos.x > 0) {\r\n    if (board[pos.x - 1][pos.y] != Cell.Border) positions.push({ x: pos.x - 1, y: pos.y });\r\n  }\r\n  if (pos.x + 1 < board.length) {\r\n    if (board[pos.x + 1][pos.y] != Cell.Border) positions.push({ x: pos.x + 1, y: pos.y });\r\n  }\r\n  if (pos.y > 0) {\r\n    if (board[pos.x][pos.y - 1] != Cell.Border) positions.push({ x: pos.x, y: pos.y - 1 });\r\n  }\r\n  if (pos.y + 1 < board[0].length) {\r\n    if (board[pos.x][pos.y + 1] != Cell.Border) positions.push({ x: pos.x, y: pos.y + 1 });\r\n  }\r\n\r\n  return positions;\r\n}\r\n\r\nexport function getDirOffset(dir: Direction): [number, number] {\r\n  switch (dir) {\r\n    case Direction.Up:\r\n      return [-1, 0];\r\n    case Direction.Down:\r\n      return [1, 0];\r\n    case Direction.Left:\r\n      return [0, -1];\r\n    case Direction.Right:\r\n      return [0, 1];\r\n  }\r\n}\r\n","import { Pos, Game, Cell, Color, Symbol } from '.';\r\nimport { isValid, naiveNextCell } from './backtrackNaive';\r\nimport { verify_connected_rule, verify_area_rule } from './rules';\r\nimport {\r\n  verify_area_symbol,\r\n  verify_viewpoint_symbol,\r\n  verify_dart_symbol,\r\n  verify_galaxy_symbol,\r\n  verify_lotus_symbol\r\n} from './symbols';\r\nimport { buildDartAdjacency } from './symbols/dart';\r\n\r\n// This interface stores cells that are \"near\" to a symbol. (\"near\" means able to influence the result of a symbol)\r\n// For example, if the symbol is an area symbol, affected cells will store the position of the empty cells on the border of the symbol.\r\ninterface Adjacency {\r\n  symbol: Symbol;\r\n  affectedCells: Pos[];\r\n}\r\n\r\n// This function chooses the next empty cell to search.\r\n// The logic is that cells that are more \"near\" to symbols should be searched first (more constrained).\r\n// This help reduces the search space.\r\nfunction advancedNextCell(game: Game, adjLookup: (Adjacency[] | null)[][]): Pos | null {\r\n  // Find the cell with the most constraints in the lookup\r\n  let highest: number = 0;\r\n  let cell: Pos | null = null;\r\n  for (let x = 0; x < game.sizeX; x++) {\r\n    for (let y = 0; y < game.sizeY; y++) {\r\n      if (!adjLookup[x][y]) continue;\r\n\r\n      if (adjLookup[x][y]!.length > highest) {\r\n        highest = adjLookup[x][y]!.length;\r\n        cell = { x, y };\r\n      }\r\n    }\r\n  }\r\n  if (cell) return cell;\r\n\r\n  // Fallback to naive next cell\r\n  return naiveNextCell(game);\r\n}\r\n\r\nfunction buildAdjacencyLookup(game: Game, adjList: Adjacency[]): (Adjacency[] | null)[][] {\r\n  let adjLookup: (Adjacency[] | null)[][] = [];\r\n\r\n  // Initialize the map\r\n  for (let x = 0; x < game.sizeX; x++) {\r\n    adjLookup[x] = [];\r\n    for (let y = 0; y < game.sizeY; y++) {\r\n      adjLookup[x][y] = null;\r\n    }\r\n  }\r\n\r\n  for (const adj of adjList) {\r\n    for (const cell of adj.affectedCells) {\r\n      if (game.board[cell.x][cell.y] != Cell.Empty) continue;\r\n\r\n      if (!adjLookup[cell.x][cell.y]) adjLookup[cell.x][cell.y] = [];\r\n      adjLookup[cell.x][cell.y]!.push(adj);\r\n    }\r\n  }\r\n\r\n  return adjLookup;\r\n}\r\n\r\n// This function checks if the guess is valid or not.\r\n// The game should be valid before the guess.\r\nexport function isValidAdvanced(\r\n  game: Game,\r\n  adjLookup: (Adjacency[] | null)[][],\r\n  placed: Pos,\r\n  placedColor: Color,\r\n  originalAdj: [Adjacency, Pos[]][]\r\n): boolean {\r\n  // We save all the adjacency changes made into original adjacency, so that we can reverse the changes if it backtracks\r\n\r\n  // Loop through all symbols that are \"near\" to this cell\r\n  // For most symbols, only cells that are \"near\" can make the symbol invalid, so only those cells should be checked\r\n\r\n  if (adjLookup[placed.x][placed.y]) {\r\n    for (const adj of adjLookup[placed.x][placed.y]!) {\r\n      if (adj.symbol.kind == 'dart') {\r\n        // Dart\r\n        // For dart, we don't need to rebuild adjacency\r\n        if (!verify_dart_symbol(game.board, adj.symbol)) return false;\r\n      } else {\r\n        // For other symbols, we do need to rebuild adjacency\r\n        let affected_cells: Pos[] | false;\r\n\r\n        if (adj.symbol.kind == 'area') {\r\n          // Area\r\n          affected_cells = verify_area_symbol(game.board, adj.symbol);\r\n        } else if (adj.symbol.kind == 'viewpoint') {\r\n          // Viewpoint\r\n          affected_cells = verify_viewpoint_symbol(game.board, adj.symbol);\r\n        } else if (adj.symbol.kind == 'galaxy') {\r\n          // Galaxy\r\n          affected_cells = verify_galaxy_symbol(game.board, adj.symbol);\r\n        } else if (adj.symbol.kind == 'lotus') {\r\n          // Lotus\r\n          affected_cells = verify_lotus_symbol(game.board, adj.symbol);\r\n        }\r\n\r\n        if (!affected_cells!) return false;\r\n\r\n        // Save affected cells\r\n        originalAdj.push([adj, adj.affectedCells]);\r\n        // Update adjacency\r\n        adj.affectedCells = affected_cells;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Area symbol special case\r\n  for (const symbol of game.symbols) {\r\n    // Opposite color case\r\n    // A cell can potentially invalidate an area symbol even if the cell is not \"near\" to the symbol\r\n    if (symbol.kind == 'area') {\r\n      const symbolCell = game.board[symbol.pos.x][symbol.pos.y];\r\n      if (\r\n        symbolCell == Cell.Empty ||\r\n        symbolCell == placedColor ||\r\n        adjLookup[placed.x][placed.y]?.find(ri => ri.symbol == symbol)\r\n      )\r\n        continue;\r\n\r\n      if (!verify_area_symbol(game.board, symbol)) return false;\r\n    }\r\n  }\r\n\r\n  for (const rule of game.rules) {\r\n    // Connected\r\n    if (rule.kind == 'connected' && !verify_connected_rule(game.board, rule)) return false;\r\n\r\n    // Area\r\n    if (rule.kind == 'area' && !verify_area_rule(game.board, rule)) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Reverse all adjacency changes made.\r\nfunction reverseAdjChange(originalAdj: [Adjacency, Pos[]][]) {\r\n  for (const [adj, affected_cells] of originalAdj) {\r\n    adj.affectedCells = affected_cells;\r\n  }\r\n}\r\n\r\n// Attempt to solve the board using a backtracking algorithm that uses some optimiziations.\r\nexport function solveAdvanced(game: Game): boolean {\r\n  if (!isValid(game)) return false;\r\n\r\n  const adjacencies: Adjacency[] = [];\r\n\r\n  // Generate adjacencies\r\n\r\n  for (const symbol of game.symbols) {\r\n    let result: Pos[] | false;\r\n    if (symbol.kind == 'area') {\r\n      result = verify_area_symbol(game.board, symbol);\r\n    } else if (symbol.kind == 'dart') {\r\n      result = buildDartAdjacency(game.board, symbol);\r\n    } else if (symbol.kind == 'viewpoint') {\r\n      result = verify_viewpoint_symbol(game.board, symbol);\r\n    } else if (symbol.kind == 'galaxy') {\r\n      result = verify_galaxy_symbol(game.board, symbol);\r\n    } else if (symbol.kind == 'lotus') {\r\n      result = verify_lotus_symbol(game.board, symbol);\r\n    }\r\n\r\n    if (!result!) return false;\r\n    adjacencies.push({ symbol, affectedCells: result });\r\n  }\r\n\r\n  return backtrack(game, adjacencies);\r\n}\r\n\r\nexport function backtrack(game: Game, adjacencies: Adjacency[]): boolean {\r\n  // Build an adjacency lookup grid\r\n  // TODO: Do not build this lookup grid on every backtrack\r\n  let adjLookup = buildAdjacencyLookup(game, adjacencies);\r\n\r\n  // Find the first empty cell\r\n  let pos: Pos | null = advancedNextCell(game, adjLookup);\r\n  if (!pos) return true;\r\n\r\n  // TODO: Use a better method to determine the order\r\n\r\n  {\r\n    const originalAdj: [Adjacency, Pos[]][] = [];\r\n\r\n    // Guess\r\n    game.board[pos.x][pos.y] = Cell.Light;\r\n    if (isValidAdvanced(game, adjLookup, pos, Cell.Light, originalAdj) && backtrack(game, adjacencies)) return true;\r\n\r\n    // Reverse adjacency changes\r\n    reverseAdjChange(originalAdj);\r\n  }\r\n\r\n  {\r\n    const originalAdj: [Adjacency, Pos[]][] = [];\r\n\r\n    // Guess\r\n    game.board[pos.x][pos.y] = Cell.Dark;\r\n    if (isValidAdvanced(game, adjLookup, pos, Cell.Dark, originalAdj) && backtrack(game, adjacencies)) return true;\r\n\r\n    // Reverse adjacency changes\r\n    reverseAdjChange(originalAdj);\r\n  }\r\n\r\n  // If both fail, returns to initial state\r\n  game.board[pos.x][pos.y] = Cell.Empty;\r\n  return false;\r\n}\r\n","import { Game, Pos, Cell } from '.';\r\nimport { verify_connected_rule, verify_area_rule } from './rules';\r\nimport {\r\n  verify_area_symbol,\r\n  verify_dart_symbol,\r\n  verify_viewpoint_symbol,\r\n  verify_galaxy_symbol,\r\n  verify_lotus_symbol\r\n} from './symbols';\r\n\r\nexport function isValid(game: Game): boolean {\r\n  for (const rule of game.rules) {\r\n    if (rule.kind == 'connected' && !verify_connected_rule(game.board, rule)) return false;\r\n    if (rule.kind == 'area' && !verify_area_rule(game.board, rule)) return false;\r\n  }\r\n\r\n  for (const symbol of game.symbols) {\r\n    if (symbol.kind == 'area' && !verify_area_symbol(game.board, symbol)) return false;\r\n    if (symbol.kind == 'dart' && !verify_dart_symbol(game.board, symbol)) return false;\r\n    if (symbol.kind == 'viewpoint' && !verify_viewpoint_symbol(game.board, symbol)) return false;\r\n    if (symbol.kind == 'galaxy' && !verify_galaxy_symbol(game.board, symbol)) return false;\r\n    if (symbol.kind == 'lotus' && !verify_lotus_symbol(game.board, symbol)) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// Find the next empty cell\r\nexport function naiveNextCell(game: Game): Pos | null {\r\n  for (let x = 0; x < game.sizeX; x++) {\r\n    for (let y = 0; y < game.sizeY; y++) {\r\n      if (game.board[x][y] === Cell.Empty) {\r\n        return { x, y };\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n// Attempt to solve the board using a backtracking algorithm\r\nexport function solve(game: Game): boolean {\r\n  if (!isValid(game)) return false;\r\n\r\n  // Find the first empty cell\r\n  let pos: Pos | null = naiveNextCell(game);\r\n  if (!pos) return true;\r\n\r\n  // TODO: Use a better method to determine the order\r\n  game.board[pos.x][pos.y] = Cell.Light;\r\n  if (solve(game)) return true;\r\n\r\n  game.board[pos.x][pos.y] = Cell.Dark;\r\n  if (solve(game)) return true;\r\n\r\n  // If both fail, returns to initial state\r\n  game.board[pos.x][pos.y] = Cell.Empty;\r\n  return false;\r\n}\r\n","export { AreaRule, verifyAreaRule as verify_area_rule } from './area';\r\nexport { ConnectedRule, verifyConnectedRule as verify_connected_rule } from './connected';\r\n","import { Board, Pos, Color, getNeighbours, Cell } from '..';\r\n\r\nexport interface AreaRule {\r\n  kind: 'area';\r\n  color: Color;\r\n  count: number;\r\n}\r\n\r\nexport function verifyAreaRule(board: Board, rule: AreaRule): boolean {\r\n  const checked: boolean[][] = [];\r\n\r\n  // Initialize the visited array\r\n  for (let x = 0; x < board.length; x++) {\r\n    checked[x] = [];\r\n    for (let y = 0; y < board[0].length; y++) {\r\n      checked[x][y] = false;\r\n    }\r\n  }\r\n\r\n  // Loop through all cells\r\n  for (let x = 0; x < board.length; x++) {\r\n    for (let y = 0; y < board[0].length; y++) {\r\n      if (checked[x][y]) continue;\r\n\r\n      if (board[x][y] == rule.color) {\r\n        // Verify area\r\n        if (!verifyAreaComplex(board, { x, y }, rule.color, rule.count, checked)) return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction verifyAreaComplex(board: Board, pos: Pos, color: Color, count: number, checked: boolean[][]): boolean {\r\n  const sameCellQueue: Pos[] = [pos];\r\n  const usableCellQueue: Pos[] = [];\r\n\r\n  let sameCellCount = 0;\r\n  let usableCellCount = 0;\r\n\r\n  const visited: boolean[][] = [];\r\n\r\n  // Initialize the visited array\r\n  for (let x = 0; x < board.length; x++) {\r\n    visited[x] = [];\r\n    for (let y = 0; y < board[0].length; y++) {\r\n      visited[x][y] = false;\r\n    }\r\n  }\r\n\r\n  visited[pos.x][pos.y] = true;\r\n  checked[pos.x][pos.y] = true;\r\n\r\n  // Count same cell\r\n  while (sameCellQueue.length > 0) {\r\n    const curPos = sameCellQueue.pop()!;\r\n    sameCellCount += 1;\r\n\r\n    for (const neighbour of getNeighbours(board, curPos)) {\r\n      if (visited[neighbour.x][neighbour.y]) continue;\r\n\r\n      const neighbourCell = board[neighbour.x][neighbour.y];\r\n\r\n      if (neighbourCell == Cell.Empty) {\r\n        usableCellQueue.push(neighbour);\r\n      } else if (neighbourCell == color) {\r\n        sameCellQueue.push(neighbour);\r\n\r\n        checked[neighbour.x][neighbour.y] = true;\r\n      }\r\n\r\n      visited[neighbour.x][neighbour.y] = true;\r\n    }\r\n  }\r\n\r\n  if (sameCellCount > count) return false;\r\n\r\n  // Count usable cell\r\n  while (usableCellQueue.length > 0) {\r\n    const curPos = usableCellQueue.pop()!;\r\n    usableCellCount += 1;\r\n\r\n    if (sameCellCount + usableCellCount >= count) return true;\r\n\r\n    for (const neighbour of getNeighbours(board, curPos)) {\r\n      if (visited[neighbour.x][neighbour.y]) continue;\r\n\r\n      const neighbourCell = board[neighbour.x][neighbour.y];\r\n\r\n      if (neighbourCell == Cell.Empty || neighbourCell == color) {\r\n        usableCellQueue.push(neighbour);\r\n        visited[neighbour.x][neighbour.y] = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return sameCellCount + usableCellCount >= count;\r\n}\r\n","import { Board, Color, Pos, getNeighbours, getOppositeColor } from '..';\r\n\r\nexport interface ConnectedRule {\r\n  kind: 'connected';\r\n  color: Color;\r\n}\r\n\r\nexport function verifyConnectedRule(board: Board, rule: ConnectedRule): boolean {\r\n  // Find all same cells\r\n  const sameCells: Pos[] = [];\r\n  for (let x = 0; x < board.length; x++) {\r\n    for (let y = 0; y < board[0].length; y++) {\r\n      if (board[x][y] == rule.color) {\r\n        sameCells.push({ x, y });\r\n      }\r\n    }\r\n  }\r\n\r\n  // If there are no same cells, return true\r\n  if (sameCells.length === 0) return true;\r\n\r\n  const queue: Pos[] = [sameCells[0]];\r\n  const visited: boolean[][] = [];\r\n\r\n  // Initialize the visited array\r\n  for (let x = 0; x < board.length; x++) {\r\n    visited[x] = [];\r\n    for (let y = 0; y < board[0].length; y++) {\r\n      visited[x][y] = false;\r\n    }\r\n  }\r\n\r\n  // Perform flood fill\r\n  visited[sameCells[0].x][sameCells[0].y] = true;\r\n\r\n  while (queue.length > 0) {\r\n    const curPos = queue.pop()!;\r\n\r\n    for (const neighbour of getNeighbours(board, curPos)) {\r\n      if (visited[neighbour.x][neighbour.y] || board[neighbour.x][neighbour.y] == getOppositeColor(rule.color)) {\r\n        continue;\r\n      }\r\n\r\n      visited[neighbour.x][neighbour.y] = true;\r\n      queue.push(neighbour);\r\n    }\r\n  }\r\n\r\n  // Check if any same cell is not reachable\r\n  for (const cell of sameCells) {\r\n    if (!visited[cell.x][cell.y]) return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n","export { AreaSymbol, verifyAreaSymbol as verify_area_symbol } from './area';\r\nexport { DartSymbol, verifyDartSymbol as verify_dart_symbol } from './dart';\r\nexport { ViewpointSymbol, verifyViewpointSymbol as verify_viewpoint_symbol } from './viewpoint';\r\nexport { GalaxySymbol, verifyGalaxySymbol as verify_galaxy_symbol } from './galaxy';\r\nexport { LotusSymbol, verifyLotusSymbol as verify_lotus_symbol } from './lotus';\r\n","import { Board, Cell, Pos, getNeighbours } from '..';\r\n\r\nexport interface AreaSymbol {\r\n  pos: Pos;\r\n  kind: 'area';\r\n  count: number;\r\n}\r\n\r\nexport function verifyAreaSymbol(board: Board, symbol: AreaSymbol): Pos[] | false {\r\n  const pos = symbol.pos;\r\n  const cell = board[pos.x][pos.y];\r\n\r\n  if (cell == Cell.Empty) return [symbol.pos];\r\n\r\n  const visited: boolean[][] = [];\r\n\r\n  const sameCellQueue: Pos[] = [pos];\r\n  const usableCellQueue: Pos[] = [];\r\n\r\n  let sameCellCount = 0;\r\n  let usableCellCount = 0;\r\n\r\n  // Initialize the visited array\r\n  for (let x = 0; x < board.length; x++) {\r\n    visited[x] = [];\r\n    for (let y = 0; y < board[0].length; y++) {\r\n      visited[x][y] = false;\r\n    }\r\n  }\r\n\r\n  visited[pos.x][pos.y] = true;\r\n\r\n  // Count same cell\r\n  while (sameCellQueue.length > 0) {\r\n    const curPos = sameCellQueue.pop()!;\r\n    sameCellCount += 1;\r\n\r\n    for (const neighbour of getNeighbours(board, curPos)) {\r\n      if (visited[neighbour.x][neighbour.y]) continue;\r\n\r\n      const neighbourCell = board[neighbour.x][neighbour.y];\r\n\r\n      if (neighbourCell == Cell.Empty) {\r\n        usableCellQueue.push(neighbour);\r\n      } else if (neighbourCell == cell) {\r\n        sameCellQueue.push(neighbour);\r\n      }\r\n\r\n      visited[neighbour.x][neighbour.y] = true;\r\n    }\r\n  }\r\n\r\n  if (sameCellCount > symbol.count) return false;\r\n\r\n  const emptyNeighbours = [...usableCellQueue];\r\n\r\n  // Count usable cell\r\n  while (usableCellQueue.length > 0) {\r\n    const curPos = usableCellQueue.pop()!;\r\n    usableCellCount += 1;\r\n\r\n    if (sameCellCount + usableCellCount >= symbol.count) return emptyNeighbours;\r\n\r\n    for (const neighbour of getNeighbours(board, curPos)) {\r\n      if (visited[neighbour.x][neighbour.y]) continue;\r\n\r\n      const neighbourCell = board[neighbour.x][neighbour.y];\r\n\r\n      if (neighbourCell == Cell.Empty || neighbourCell == cell) {\r\n        usableCellQueue.push(neighbour);\r\n        visited[neighbour.x][neighbour.y] = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return sameCellCount + usableCellCount >= symbol.count ? emptyNeighbours : false;\r\n}\r\n","import { Board, Cell, Color, Direction, Pos, getDirOffset, getOppositeColor, verifyPos } from '..';\r\n\r\nexport interface DartSymbol {\r\n  pos: Pos;\r\n  kind: 'dart';\r\n  count: number;\r\n  direction: Direction;\r\n}\r\n\r\nexport function verifyDartSymbol(board: Board, symbol: DartSymbol): boolean {\r\n  const pos = symbol.pos;\r\n  const cell = board[pos.x][pos.y];\r\n\r\n  if (cell == Cell.Empty) return true;\r\n\r\n  let [dirX, dirY] = getDirOffset(symbol.direction);\r\n\r\n  let x = pos.x + dirX;\r\n  let y = pos.y + dirY;\r\n\r\n  let oppositeCells = 0;\r\n  let emptyCells = 0;\r\n\r\n  while (verifyPos(board, { x, y })) {\r\n    // Opposite Cell\r\n    if (getOppositeColor(cell as Color) == board[x][y]) {\r\n      oppositeCells += 1;\r\n      if (oppositeCells > symbol.count) return false;\r\n    }\r\n\r\n    // Empty cells\r\n    if (board[x][y] == Cell.Empty) emptyCells += 1;\r\n\r\n    x += dirX;\r\n    y += dirY;\r\n  }\r\n\r\n  return oppositeCells + emptyCells >= symbol.count;\r\n}\r\n\r\n// Dart adjacency can be built before running the solver\r\nexport function buildDartAdjacency(board: Board, symbol: DartSymbol): Pos[] {\r\n  const affectedCells: Pos[] = [];\r\n\r\n  let [dirX, dirY] = getDirOffset(symbol.direction);\r\n  let x = symbol.pos.x;\r\n  let y = symbol.pos.y;\r\n\r\n  while (verifyPos(board, { x, y })) {\r\n    if (board[x][y] == Cell.Empty) {\r\n      affectedCells.push({ x, y });\r\n    }\r\n\r\n    x += dirX;\r\n    y += dirY;\r\n  }\r\n\r\n  return affectedCells;\r\n}\r\n","import { Board, Cell, Color, Pos, getOppositeColor, verifyPos } from '..';\r\n\r\nexport interface ViewpointSymbol {\r\n  pos: Pos;\r\n  kind: 'viewpoint';\r\n  count: number;\r\n}\r\n\r\nexport function verifyViewpointSymbol(board: Board, symbol: ViewpointSymbol): Pos[] | false {\r\n  const pos = symbol.pos;\r\n  const cell = board[pos.x][pos.y];\r\n\r\n  if (cell == Cell.Empty) return [symbol.pos];\r\n\r\n  let usableCells = 1;\r\n  let sameCells = 1;\r\n\r\n  let affected_cells: Pos[] = [];\r\n\r\n  function traverse(dirX: number, dirY: number): boolean {\r\n    let connected = true;\r\n    let x = pos.x + dirX;\r\n    let y = pos.y + dirY;\r\n\r\n    while (verifyPos(board, { x, y })) {\r\n      const curCell = board[x][y];\r\n\r\n      if (connected) {\r\n        if (cell == curCell) {\r\n          sameCells += 1;\r\n          if (sameCells > symbol.count) return true;\r\n        } else {\r\n          if (curCell == Cell.Empty) affected_cells.push({ x, y });\r\n          connected = false;\r\n        }\r\n      }\r\n\r\n      if (getOppositeColor(cell as Color) == curCell || curCell == Cell.Border) break;\r\n\r\n      usableCells += 1;\r\n\r\n      x += dirX;\r\n      y += dirY;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  if (traverse(-1, 0) || traverse(1, 0) || traverse(0, -1) || traverse(0, 1)) return false;\r\n\r\n  if (usableCells < symbol.count) return false;\r\n\r\n  return affected_cells;\r\n}\r\n","import { Board, Pos, verifyPos, Cell, getNeighbours } from '..';\r\n\r\nexport interface GalaxySymbol {\r\n  pos: Pos;\r\n  kind: 'galaxy';\r\n}\r\n\r\n// Translate a position in relative to a galaxy symbol\r\nfunction movePosGalaxy(board: Board, symbol: GalaxySymbol, pos: Pos): Pos | null {\r\n  const newPos = { x: 2 * symbol.pos.x - pos.x, y: 2 * symbol.pos.y - pos.y };\r\n  return verifyPos(board, newPos) ? newPos : null;\r\n}\r\n\r\n// Check if galaxy symbol is valid\r\nexport function verifyGalaxySymbol(board: Board, symbol: GalaxySymbol): Pos[] | false {\r\n  const pos = symbol.pos;\r\n  const cell = board[pos.x][pos.y];\r\n\r\n  if (cell == Cell.Empty) return [pos];\r\n\r\n  const queue: Pos[] = [pos];\r\n  const visited: boolean[][] = [];\r\n\r\n  const affectedCells: Pos[] = [];\r\n\r\n  // Initialize the visited array\r\n  for (let x = 0; x < board.length; x++) {\r\n    visited[x] = [];\r\n    for (let y = 0; y < board[0].length; y++) {\r\n      visited[x][y] = false;\r\n    }\r\n  }\r\n\r\n  // Visit all connected cells\r\n  while (queue.length > 0) {\r\n    const curPos = queue.pop()!;\r\n\r\n    if (visited[curPos.x][curPos.y]) continue;\r\n    visited[curPos.x][curPos.y] = true;\r\n\r\n    const oppoPos = movePosGalaxy(board, symbol, curPos);\r\n    if (oppoPos == null) return false;\r\n    if (!(board[oppoPos.x][oppoPos.y] == Cell.Empty || board[oppoPos.x][oppoPos.y] == cell)) return false;\r\n\r\n    for (const neighbour of getNeighbours(board, curPos)) {\r\n      if (visited[neighbour.x][neighbour.y]) continue;\r\n\r\n      if (board[neighbour.x][neighbour.y] == Cell.Empty) {\r\n        affectedCells.push(neighbour);\r\n      } else if (board[neighbour.x][neighbour.y] == cell) {\r\n        queue.push(neighbour);\r\n      }\r\n    }\r\n  }\r\n\r\n  return affectedCells;\r\n}\r\n","import { Board, Cell, Pos, getNeighbours, verifyPos } from '..';\r\n\r\nexport interface LotusSymbol {\r\n  pos: Pos;\r\n  kind: 'lotus';\r\n  rotation: 0 | 1 | 2 | 3;\r\n}\r\n\r\n// Translate a position in relative to a lotus symbol\r\nfunction movePosLotus(board: Board, symbol: LotusSymbol, pos: Pos): Pos | null {\r\n  let newPos: Pos;\r\n  if (symbol.rotation == 0) {\r\n    newPos = { x: pos.x, y: 2 * symbol.pos.y - pos.y };\r\n  } else if (symbol.rotation == 1) {\r\n    newPos = { x: symbol.pos.x + symbol.pos.y - pos.y, y: symbol.pos.x + symbol.pos.y - pos.x };\r\n  } else if (symbol.rotation == 2) {\r\n    newPos = { x: 2 * symbol.pos.x - pos.x, y: pos.y };\r\n  } else if (symbol.rotation == 3) {\r\n    newPos = { x: symbol.pos.x - symbol.pos.y + pos.y, y: symbol.pos.y - symbol.pos.x + pos.x };\r\n  }\r\n\r\n  return verifyPos(board, newPos!) ? newPos! : null;\r\n}\r\n\r\n// Check if lotus symbol is valid\r\nexport function verifyLotusSymbol(board: Board, symbol: LotusSymbol): Pos[] | false {\r\n  const pos = symbol.pos;\r\n  const cell = board[pos.x][pos.y];\r\n\r\n  if (cell == Cell.Empty) return [pos];\r\n\r\n  const queue: Pos[] = [pos];\r\n  const visited: boolean[][] = [];\r\n\r\n  const affectedCells: Pos[] = [];\r\n\r\n  // Initialize the visited array\r\n  for (let x = 0; x < board.length; x++) {\r\n    visited[x] = [];\r\n    for (let y = 0; y < board[0].length; y++) {\r\n      visited[x][y] = false;\r\n    }\r\n  }\r\n\r\n  // Visit all connected cells\r\n  while (queue.length > 0) {\r\n    const curPos = queue.pop()!;\r\n\r\n    if (visited[curPos.x][curPos.y]) continue;\r\n    visited[curPos.x][curPos.y] = true;\r\n\r\n    const oppoPos = movePosLotus(board, symbol, curPos);\r\n    if (oppoPos == null) return false;\r\n    if (!(board[oppoPos.x][oppoPos.y] == Cell.Empty || board[oppoPos.x][oppoPos.y] == cell)) return false;\r\n\r\n    for (const neighbour of getNeighbours(board, curPos)) {\r\n      if (visited[neighbour.x][neighbour.y]) continue;\r\n\r\n      if (board[neighbour.x][neighbour.y] == Cell.Empty) {\r\n        affectedCells.push(neighbour);\r\n      } else if (board[neighbour.x][neighbour.y] == cell) {\r\n        queue.push(neighbour);\r\n      }\r\n    }\r\n  }\r\n\r\n  return affectedCells;\r\n}\r\n"],"names":["Cell","Direction","$23a1d4457e298dfa$export$f6f0c3fe4ec306ea","$23a1d4457e298dfa$export$cacd6541cfeeb6c1","$26b86bb92301225f$export$2e2bcd8739ae039","$23a1d4457e298dfa$export$4a4364286744cc63","board","pos","x","length","y","$23a1d4457e298dfa$export$c6757b58ad4e7ffb","color","$23a1d4457e298dfa$export$2fdcdcc209570cf1","positions","push","$23a1d4457e298dfa$export$8f67fe9da9d07bbe","dir","$40d494cec576e41e$export$adfbfb79bd6241","rule","checked","$40d494cec576e41e$var$verifyAreaComplex","count","sameCellQueue","usableCellQueue","sameCellCount","usableCellCount","visited","neighbour","pop","neighbourCell","Empty","curPos","$51ae21d6bd218658$export$1a0bd7e1795f2686","sameCells","queue","cell","$a63e24b34f338180$export$31354bc3afda28ec","symbol","emptyNeighbours","$c02e051691fcd169$export$1134e8a1d414bde5","dirX","dirY","direction","oppositeCells","emptyCells","$4d1253280084f323$export$a357ea5ecccee97a","usableCells","affected_cells","traverse","connected","curCell","Border","$6d65da1caa50a14e$export$8232563112a7992c","affectedCells","oppoPos","$6d65da1caa50a14e$var$movePosGalaxy","newPos","$69cf25c83de67185$export$611011f9f41996b0","$69cf25c83de67185$var$movePosLotus","rotation","$c771330a62c04a0a$export$8067003fcb413cb","game","adjLookup","placed","placedColor","originalAdj","adj","kind","symbols","symbolCell","find","ri","rules","$c771330a62c04a0a$var$reverseAdjChange","$b4e14b6b8da86996$var$canvas","document","getElementById","$b4e14b6b8da86996$var$rect","getBoundingClientRect","$b4e14b6b8da86996$var$ctx","getContext","$b4e14b6b8da86996$var$game","$b4e14b6b8da86996$var$createEmptyGame","$b4e14b6b8da86996$var$isMouseDown","$b4e14b6b8da86996$var$mouseCell","$b4e14b6b8da86996$var$drawGame","width","sizeY","height","sizeX","clearRect","pixelX","pixelY","$b4e14b6b8da86996$var$getCellColor","Light","Dark","fillStyle","fillRect","strokeStyle","strokeRect","textAlign","textBaseline","font","Math","floor","$b4e14b6b8da86996$var$pixelCellSize","fillText","toString","text","$b4e14b6b8da86996$var$getMouseCellPos","event","pageX","left","pageY","top","$b4e14b6b8da86996$var$resetGame","parseInt","value","isNaN","alert","$b4e14b6b8da86996$var$updateRuleList","$b4e14b6b8da86996$var$getMode","$b4e14b6b8da86996$var$getInput","out","inputBox","createElement","id","style","body","appendChild","window","requestAnimationFrame","focus","addEventListener","e","key","blur","remove","list","innerHTML","element","textContent","button","preventDefault","num","preset","target","JSON","parse","err","console","error","log","stringify","time","success","adjacencies","result","$c771330a62c04a0a$export$5a6d40a70b01b335","$c771330a62c04a0a$var$buildAdjacencyLookup","adjList","$c771330a62c04a0a$var$advancedNextCell","highest","timeEnd","mode","filter","s","Up","Down","Left","Right"],"version":3,"file":"index.89240e7d.js.map"}